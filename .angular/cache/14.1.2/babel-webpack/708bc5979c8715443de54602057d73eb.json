{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql.client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport function mapAsyncIterator(iterable, callback) {\n  const iterator = iterable[Symbol.asyncIterator]();\n\n  function mapResult(_x) {\n    return _mapResult.apply(this, arguments);\n  }\n\n  function _mapResult() {\n    _mapResult = _asyncToGenerator(function* (result) {\n      if (result.done) {\n        return result;\n      }\n\n      try {\n        return {\n          value: yield callback(result.value),\n          done: false\n        };\n      } catch (error) {\n        /* c8 ignore start */\n        // FIXME: add test case\n        if (typeof iterator.return === 'function') {\n          try {\n            yield iterator.return();\n          } catch (_e) {\n            /* ignore error */\n          }\n        }\n\n        throw error;\n        /* c8 ignore stop */\n      }\n    });\n    return _mapResult.apply(this, arguments);\n  }\n\n  return {\n    next() {\n      return _asyncToGenerator(function* () {\n        return mapResult(yield iterator.next());\n      })();\n    },\n\n    return() {\n      return _asyncToGenerator(function* () {\n        // If iterator.return() does not exist, then type R must be undefined.\n        return typeof iterator.return === 'function' ? mapResult(yield iterator.return()) : {\n          value: undefined,\n          done: true\n        };\n      })();\n    },\n\n    throw(error) {\n      return _asyncToGenerator(function* () {\n        if (typeof iterator.throw === 'function') {\n          return mapResult(yield iterator.throw(error));\n        }\n\n        throw error;\n      })();\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql.client/node_modules/graphql/execution/mapAsyncIterator.mjs"],"names":["mapAsyncIterator","iterable","callback","iterator","Symbol","asyncIterator","mapResult","result","done","value","error","return","_e","next","undefined","throw"],"mappings":";;AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA0BC,QAA1B,EAAoCC,QAApC,EAA8C;AACnD,QAAMC,QAAQ,GAAGF,QAAQ,CAACG,MAAM,CAACC,aAAR,CAAR,EAAjB;;AADmD,WAGpCC,SAHoC;AAAA;AAAA;;AAAA;AAAA,mCAGnD,WAAyBC,MAAzB,EAAiC;AAC/B,UAAIA,MAAM,CAACC,IAAX,EAAiB;AACf,eAAOD,MAAP;AACD;;AAED,UAAI;AACF,eAAO;AACLE,UAAAA,KAAK,QAAQP,QAAQ,CAACK,MAAM,CAACE,KAAR,CADhB;AAELD,UAAAA,IAAI,EAAE;AAFD,SAAP;AAID,OALD,CAKE,OAAOE,KAAP,EAAc;AACd;AACA;AACA,YAAI,OAAOP,QAAQ,CAACQ,MAAhB,KAA2B,UAA/B,EAA2C;AACzC,cAAI;AACF,kBAAMR,QAAQ,CAACQ,MAAT,EAAN;AACD,WAFD,CAEE,OAAOC,EAAP,EAAW;AACX;AACD;AACF;;AAED,cAAMF,KAAN;AACA;AACD;AACF,KA3BkD;AAAA;AAAA;;AA6BnD,SAAO;AACCG,IAAAA,IAAN,GAAa;AAAA;AACX,eAAOP,SAAS,OAAOH,QAAQ,CAACU,IAAT,EAAP,CAAhB;AADW;AAEZ,KAHI;;AAKCF,IAAAA,MAAN,GAAe;AAAA;AACb;AACA,eAAO,OAAOR,QAAQ,CAACQ,MAAhB,KAA2B,UAA3B,GACHL,SAAS,OAAOH,QAAQ,CAACQ,MAAT,EAAP,CADN,GAEH;AACEF,UAAAA,KAAK,EAAEK,SADT;AAEEN,UAAAA,IAAI,EAAE;AAFR,SAFJ;AAFa;AAQd,KAbI;;AAeCO,IAAAA,KAAN,CAAYL,KAAZ,EAAmB;AAAA;AACjB,YAAI,OAAOP,QAAQ,CAACY,KAAhB,KAA0B,UAA9B,EAA0C;AACxC,iBAAOT,SAAS,OAAOH,QAAQ,CAACY,KAAT,CAAeL,KAAf,CAAP,CAAhB;AACD;;AAED,cAAMA,KAAN;AALiB;AAMlB,KArBI;;AAuBL,KAACN,MAAM,CAACC,aAAR,IAAyB;AACvB,aAAO,IAAP;AACD;;AAzBI,GAAP;AA2BD","sourcesContent":["/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport function mapAsyncIterator(iterable, callback) {\n  const iterator = iterable[Symbol.asyncIterator]();\n\n  async function mapResult(result) {\n    if (result.done) {\n      return result;\n    }\n\n    try {\n      return {\n        value: await callback(result.value),\n        done: false,\n      };\n    } catch (error) {\n      /* c8 ignore start */\n      // FIXME: add test case\n      if (typeof iterator.return === 'function') {\n        try {\n          await iterator.return();\n        } catch (_e) {\n          /* ignore error */\n        }\n      }\n\n      throw error;\n      /* c8 ignore stop */\n    }\n  }\n\n  return {\n    async next() {\n      return mapResult(await iterator.next());\n    },\n\n    async return() {\n      // If iterator.return() does not exist, then type R must be undefined.\n      return typeof iterator.return === 'function'\n        ? mapResult(await iterator.return())\n        : {\n            value: undefined,\n            done: true,\n          };\n    },\n\n    async throw(error) {\n      if (typeof iterator.throw === 'function') {\n        return mapResult(await iterator.throw(error));\n      }\n\n      throw error;\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}