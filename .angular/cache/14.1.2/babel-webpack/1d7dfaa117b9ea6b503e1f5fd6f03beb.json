{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\n;\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\n\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n  var original = cache[methodName];\n\n  if (typeof original === \"function\") {\n    cache[methodName] = function () {\n      destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n      return original.apply(this, arguments);\n    };\n  }\n}\n\nfunction cancelNotifyTimeout(info) {\n  if (info[\"notifyTimeout\"]) {\n    clearTimeout(info[\"notifyTimeout\"]);\n    info[\"notifyTimeout\"] = void 0;\n  }\n}\n\nvar QueryInfo = function () {\n  function QueryInfo(queryManager, queryId) {\n    if (queryId === void 0) {\n      queryId = queryManager.generateQueryId();\n    }\n\n    this.queryId = queryId;\n    this.listeners = new Set();\n    this.document = null;\n    this.lastRequestId = 1;\n    this.subscriptions = new Set();\n    this.stopped = false;\n    this.dirty = false;\n    this.observableQuery = null;\n    var cache = this.cache = queryManager.cache;\n\n    if (!destructiveMethodCounts.has(cache)) {\n      destructiveMethodCounts.set(cache, 0);\n      wrapDestructiveCacheMethod(cache, \"evict\");\n      wrapDestructiveCacheMethod(cache, \"modify\");\n      wrapDestructiveCacheMethod(cache, \"reset\");\n    }\n  }\n\n  QueryInfo.prototype.init = function (query) {\n    var networkStatus = query.networkStatus || NetworkStatus.loading;\n\n    if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {\n      networkStatus = NetworkStatus.setVariables;\n    }\n\n    if (!equal(query.variables, this.variables)) {\n      this.lastDiff = void 0;\n    }\n\n    Object.assign(this, {\n      document: query.document,\n      variables: query.variables,\n      networkError: null,\n      graphQLErrors: this.graphQLErrors || [],\n      networkStatus: networkStatus\n    });\n\n    if (query.observableQuery) {\n      this.setObservableQuery(query.observableQuery);\n    }\n\n    if (query.lastRequestId) {\n      this.lastRequestId = query.lastRequestId;\n    }\n\n    return this;\n  };\n\n  QueryInfo.prototype.reset = function () {\n    cancelNotifyTimeout(this);\n    this.lastDiff = void 0;\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.getDiff = function (variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var options = this.getDiffOptions(variables);\n\n    if (this.lastDiff && equal(options, this.lastDiff.options)) {\n      return this.lastDiff.diff;\n    }\n\n    this.updateWatch(this.variables = variables);\n    var oq = this.observableQuery;\n\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return {\n        complete: false\n      };\n    }\n\n    var diff = this.cache.diff(options);\n    this.updateLastDiff(diff, options);\n    return diff;\n  };\n\n  QueryInfo.prototype.updateLastDiff = function (diff, options) {\n    this.lastDiff = diff ? {\n      diff: diff,\n      options: options || this.getDiffOptions()\n    } : void 0;\n  };\n\n  QueryInfo.prototype.getDiffOptions = function (variables) {\n    var _a;\n\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    return {\n      query: this.document,\n      variables: variables,\n      returnPartialData: true,\n      optimistic: true,\n      canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults\n    };\n  };\n\n  QueryInfo.prototype.setDiff = function (diff) {\n    var _this = this;\n\n    var oldDiff = this.lastDiff && this.lastDiff.diff;\n    this.updateLastDiff(diff);\n\n    if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n      this.dirty = true;\n\n      if (!this.notifyTimeout) {\n        this.notifyTimeout = setTimeout(function () {\n          return _this.notify();\n        }, 0);\n      }\n    }\n  };\n\n  QueryInfo.prototype.setObservableQuery = function (oq) {\n    var _this = this;\n\n    if (oq === this.observableQuery) return;\n\n    if (this.oqListener) {\n      this.listeners.delete(this.oqListener);\n    }\n\n    this.observableQuery = oq;\n\n    if (oq) {\n      oq[\"queryInfo\"] = this;\n      this.listeners.add(this.oqListener = function () {\n        var diff = _this.getDiff();\n\n        if (diff.fromOptimisticTransaction) {\n          oq[\"observe\"]();\n        } else {\n          reobserveCacheFirst(oq);\n        }\n      });\n    } else {\n      delete this.oqListener;\n    }\n  };\n\n  QueryInfo.prototype.notify = function () {\n    var _this = this;\n\n    cancelNotifyTimeout(this);\n\n    if (this.shouldNotify()) {\n      this.listeners.forEach(function (listener) {\n        return listener(_this);\n      });\n    }\n\n    this.dirty = false;\n  };\n\n  QueryInfo.prototype.shouldNotify = function () {\n    if (!this.dirty || !this.listeners.size) {\n      return false;\n    }\n\n    if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n      var fetchPolicy = this.observableQuery.options.fetchPolicy;\n\n      if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  QueryInfo.prototype.stop = function () {\n    if (!this.stopped) {\n      this.stopped = true;\n      this.reset();\n      this.cancel();\n      this.cancel = QueryInfo.prototype.cancel;\n      this.subscriptions.forEach(function (sub) {\n        return sub.unsubscribe();\n      });\n      var oq = this.observableQuery;\n      if (oq) oq.stopPolling();\n    }\n  };\n\n  QueryInfo.prototype.cancel = function () {};\n\n  QueryInfo.prototype.updateWatch = function (variables) {\n    var _this = this;\n\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n\n    var oq = this.observableQuery;\n\n    if (oq && oq.options.fetchPolicy === \"no-cache\") {\n      return;\n    }\n\n    var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), {\n      watcher: this,\n      callback: function (diff) {\n        return _this.setDiff(diff);\n      }\n    });\n\n    if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n      this.cancel();\n      this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n    }\n  };\n\n  QueryInfo.prototype.resetLastWrite = function () {\n    this.lastWrite = void 0;\n  };\n\n  QueryInfo.prototype.shouldWrite = function (result, variables) {\n    var lastWrite = this.lastWrite;\n    return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));\n  };\n\n  QueryInfo.prototype.markResult = function (result, options, cacheWriteBehavior) {\n    var _this = this;\n\n    this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n    this.reset();\n\n    if (options.fetchPolicy === 'no-cache') {\n      this.updateLastDiff({\n        result: result.data,\n        complete: true\n      }, this.getDiffOptions(options.variables));\n    } else if (cacheWriteBehavior !== 0) {\n      if (shouldWriteResult(result, options.errorPolicy)) {\n        this.cache.performTransaction(function (cache) {\n          if (_this.shouldWrite(result, options.variables)) {\n            cache.writeQuery({\n              query: _this.document,\n              data: result.data,\n              variables: options.variables,\n              overwrite: cacheWriteBehavior === 1\n            });\n            _this.lastWrite = {\n              result: result,\n              variables: options.variables,\n              dmCount: destructiveMethodCounts.get(_this.cache)\n            };\n          } else {\n            if (_this.lastDiff && _this.lastDiff.diff.complete) {\n              result.data = _this.lastDiff.diff.result;\n              return;\n            }\n          }\n\n          var diffOptions = _this.getDiffOptions(options.variables);\n\n          var diff = cache.diff(diffOptions);\n\n          if (!_this.stopped) {\n            _this.updateWatch(options.variables);\n          }\n\n          _this.updateLastDiff(diff, diffOptions);\n\n          if (diff.complete) {\n            result.data = diff.result;\n          }\n        });\n      } else {\n        this.lastWrite = void 0;\n      }\n    }\n  };\n\n  QueryInfo.prototype.markReady = function () {\n    this.networkError = null;\n    return this.networkStatus = NetworkStatus.ready;\n  };\n\n  QueryInfo.prototype.markError = function (error) {\n    this.networkStatus = NetworkStatus.error;\n    this.lastWrite = void 0;\n    this.reset();\n\n    if (error.graphQLErrors) {\n      this.graphQLErrors = error.graphQLErrors;\n    }\n\n    if (error.networkError) {\n      this.networkError = error.networkError;\n    }\n\n    return error;\n  };\n\n  return QueryInfo;\n}();\n\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n  if (errorPolicy === void 0) {\n    errorPolicy = \"none\";\n  }\n\n  var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n  var writeWithErrors = !graphQLResultHasError(result);\n\n  if (!writeWithErrors && ignoreErrors && result.data) {\n    writeWithErrors = true;\n  }\n\n  return writeWithErrors;\n}","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql.client/node_modules/@apollo/client/core/QueryInfo.js"],"names":["__assign","equal","reobserveCacheFirst","isNonEmptyArray","graphQLResultHasError","canUseWeakMap","NetworkStatus","isNetworkRequestInFlight","destructiveMethodCounts","WeakMap","Map","wrapDestructiveCacheMethod","cache","methodName","original","set","get","apply","arguments","cancelNotifyTimeout","info","clearTimeout","QueryInfo","queryManager","queryId","generateQueryId","listeners","Set","document","lastRequestId","subscriptions","stopped","dirty","observableQuery","has","prototype","init","query","networkStatus","loading","variables","setVariables","lastDiff","Object","assign","networkError","graphQLErrors","setObservableQuery","reset","getDiff","options","getDiffOptions","diff","updateWatch","oq","fetchPolicy","complete","updateLastDiff","_a","returnPartialData","optimistic","canonizeResults","setDiff","_this","oldDiff","result","notifyTimeout","setTimeout","notify","oqListener","delete","add","fromOptimisticTransaction","shouldNotify","forEach","listener","size","stop","cancel","sub","unsubscribe","stopPolling","watchOptions","watcher","callback","lastWatch","watch","resetLastWrite","lastWrite","shouldWrite","dmCount","data","markResult","cacheWriteBehavior","errors","shouldWriteResult","errorPolicy","performTransaction","writeQuery","overwrite","diffOptions","markReady","ready","markError","error","ignoreErrors","writeWithErrors"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap, } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight, } from \"./networkStatus.js\";\n;\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        cache[methodName] = function () {\n            destructiveMethodCounts.set(cache, (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            return original.apply(this, arguments);\n        };\n    }\n}\nfunction cancelNotifyTimeout(info) {\n    if (info[\"notifyTimeout\"]) {\n        clearTimeout(info[\"notifyTimeout\"]);\n        info[\"notifyTimeout\"] = void 0;\n    }\n}\nvar QueryInfo = (function () {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) { queryId = queryManager.generateQueryId(); }\n        this.queryId = queryId;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.subscriptions = new Set();\n        this.stopped = false;\n        this.dirty = false;\n        this.observableQuery = null;\n        var cache = this.cache = queryManager.cache;\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function (query) {\n        var networkStatus = query.networkStatus || NetworkStatus.loading;\n        if (this.variables &&\n            this.networkStatus !== NetworkStatus.loading &&\n            !equal(this.variables, query.variables)) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        if (!equal(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus,\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.reset = function () {\n        cancelNotifyTimeout(this);\n        this.lastDiff = void 0;\n        this.dirty = false;\n    };\n    QueryInfo.prototype.getDiff = function (variables) {\n        if (variables === void 0) { variables = this.variables; }\n        var options = this.getDiffOptions(variables);\n        if (this.lastDiff && equal(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables = variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return { complete: false };\n        }\n        var diff = this.cache.diff(options);\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function (diff, options) {\n        this.lastDiff = diff ? {\n            diff: diff,\n            options: options || this.getDiffOptions(),\n        } : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function (variables) {\n        var _a;\n        if (variables === void 0) { variables = this.variables; }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults,\n        };\n    };\n    QueryInfo.prototype.setDiff = function (diff) {\n        var _this = this;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        this.updateLastDiff(diff);\n        if (!this.dirty &&\n            !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function (oq) {\n        var _this = this;\n        if (oq === this.observableQuery)\n            return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add(this.oqListener = function () {\n                var diff = _this.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    oq[\"observe\"]();\n                }\n                else {\n                    reobserveCacheFirst(oq);\n                }\n            });\n        }\n        else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function () {\n        var _this = this;\n        cancelNotifyTimeout(this);\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function (listener) { return listener(_this); });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function () {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if (isNetworkRequestInFlight(this.networkStatus) &&\n            this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" &&\n                fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function () {\n        if (!this.stopped) {\n            this.stopped = true;\n            this.reset();\n            this.cancel();\n            this.cancel = QueryInfo.prototype.cancel;\n            this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n            var oq = this.observableQuery;\n            if (oq)\n                oq.stopPolling();\n        }\n    };\n    QueryInfo.prototype.cancel = function () { };\n    QueryInfo.prototype.updateWatch = function (variables) {\n        var _this = this;\n        if (variables === void 0) { variables = this.variables; }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), { watcher: this, callback: function (diff) { return _this.setDiff(diff); } });\n        if (!this.lastWatch ||\n            !equal(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancel = this.cache.watch(this.lastWatch = watchOptions);\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function () {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function (result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite &&\n            lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n            equal(variables, lastWrite.variables) &&\n            equal(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function (result, options, cacheWriteBehavior) {\n        var _this = this;\n        this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n        this.reset();\n        if (options.fetchPolicy === 'no-cache') {\n            this.updateLastDiff({ result: result.data, complete: true }, this.getDiffOptions(options.variables));\n        }\n        else if (cacheWriteBehavior !== 0) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                this.cache.performTransaction(function (cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: _this.document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1,\n                        });\n                        _this.lastWrite = {\n                            result: result,\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache),\n                        };\n                    }\n                    else {\n                        if (_this.lastDiff &&\n                            _this.lastDiff.diff.complete) {\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = cache.diff(diffOptions);\n                    if (!_this.stopped) {\n                        _this.updateWatch(options.variables);\n                    }\n                    _this.updateLastDiff(diff, diffOptions);\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            }\n            else {\n                this.lastWrite = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function () {\n        this.networkError = null;\n        return this.networkStatus = NetworkStatus.ready;\n    };\n    QueryInfo.prototype.markError = function (error) {\n        this.networkStatus = NetworkStatus.error;\n        this.lastWrite = void 0;\n        this.reset();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}());\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) { errorPolicy = \"none\"; }\n    var ignoreErrors = errorPolicy === \"ignore\" ||\n        errorPolicy === \"all\";\n    var writeWithErrors = !graphQLResultHasError(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n}\n"]},"metadata":{},"sourceType":"module"}