{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { isNonNullObject } from \"./objects.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  return mergeDeepArray(sources);\n}\nexport function mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n\n  if (count > 1) {\n    var merger = new DeepMerger();\n\n    for (var i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n\n  return target;\n}\n\nvar defaultReconciler = function (target, source, property) {\n  return this.merge(target[property], source[property]);\n};\n\nvar DeepMerger = function () {\n  function DeepMerger(reconciler) {\n    if (reconciler === void 0) {\n      reconciler = defaultReconciler;\n    }\n\n    this.reconciler = reconciler;\n    this.isObject = isNonNullObject;\n    this.pastCopies = new Set();\n  }\n\n  DeepMerger.prototype.merge = function (target, source) {\n    var _this = this;\n\n    var context = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      context[_i - 2] = arguments[_i];\n    }\n\n    if (isNonNullObject(source) && isNonNullObject(target)) {\n      Object.keys(source).forEach(function (sourceKey) {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          var targetValue = target[sourceKey];\n\n          if (source[sourceKey] !== targetValue) {\n            var result = _this.reconciler.apply(_this, __spreadArray([target, source, sourceKey], context, false));\n\n            if (result !== targetValue) {\n              target = _this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          target = _this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n      return target;\n    }\n\n    return source;\n  };\n\n  DeepMerger.prototype.shallowCopyForMerge = function (value) {\n    if (isNonNullObject(value)) {\n      if (this.pastCopies.has(value)) {\n        if (!Object.isFrozen(value)) return value;\n        this.pastCopies.delete(value);\n      }\n\n      if (Array.isArray(value)) {\n        value = value.slice(0);\n      } else {\n        value = __assign({\n          __proto__: Object.getPrototypeOf(value)\n        }, value);\n      }\n\n      this.pastCopies.add(value);\n    }\n\n    return value;\n  };\n\n  return DeepMerger;\n}();\n\nexport { DeepMerger };","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql/spring.graphql.client/node_modules/@apollo/client/utilities/common/mergeDeep.js"],"names":["__assign","__spreadArray","isNonNullObject","hasOwnProperty","Object","prototype","mergeDeep","sources","_i","arguments","length","mergeDeepArray","target","count","merger","DeepMerger","i","merge","defaultReconciler","source","property","reconciler","isObject","pastCopies","Set","_this","context","keys","forEach","sourceKey","call","targetValue","result","apply","shallowCopyForMerge","value","has","isFrozen","delete","Array","isArray","slice","__proto__","getPrototypeOf","add"],"mappings":"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","sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { isNonNullObject } from \"./objects.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nexport function mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for (var i = 1; i < count; ++i) {\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nvar defaultReconciler = function (target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = (function () {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) { reconciler = defaultReconciler; }\n        this.reconciler = reconciler;\n        this.isObject = isNonNullObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function (target, source) {\n        var _this = this;\n        var context = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            context[_i - 2] = arguments[_i];\n        }\n        if (isNonNullObject(source) && isNonNullObject(target)) {\n            Object.keys(source).forEach(function (sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, __spreadArray([target, source, sourceKey], context, false));\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                }\n                else {\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function (value) {\n        if (isNonNullObject(value)) {\n            if (this.pastCopies.has(value)) {\n                if (!Object.isFrozen(value))\n                    return value;\n                this.pastCopies.delete(value);\n            }\n            if (Array.isArray(value)) {\n                value = value.slice(0);\n            }\n            else {\n                value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n            }\n            this.pastCopies.add(value);\n        }\n        return value;\n    };\n    return DeepMerger;\n}());\nexport { DeepMerger };\n"]},"metadata":{},"sourceType":"module"}