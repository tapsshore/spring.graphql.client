{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql/spring.graphql.client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, execute, getFieldDef } from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(_x) {\n  return _subscribe.apply(this, arguments);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nfunction _subscribe() {\n  _subscribe = _asyncToGenerator(function* (args) {\n    // Temporary for v15 to v16 migration. Remove in v17\n    arguments.length < 2 || devAssert(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n    const {\n      schema,\n      document,\n      rootValue,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver,\n      subscribeFieldResolver\n    } = args;\n    const resultOrStream = yield createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);\n\n    if (!isAsyncIterable(resultOrStream)) {\n      return resultOrStream;\n    } // For each payload yielded from a subscription, map it over the normal\n    // GraphQL `execute` function, with `payload` as the rootValue.\n    // This implements the \"MapSourceToResponseEvent\" algorithm described in\n    // the GraphQL specification. The `execute` function provides the\n    // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n    // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n\n    const mapSourceToResponse = payload => execute({\n      schema,\n      document,\n      rootValue: payload,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver\n    }); // Map every source value to a ExecutionResult value as described above.\n\n\n    return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n  });\n  return _subscribe.apply(this, arguments);\n}\n\nexport function createSourceEventStream(_x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n  return _createSourceEventStream.apply(this, arguments);\n}\n\nfunction _createSourceEventStream() {\n  _createSourceEventStream = _asyncToGenerator(function* (schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver) {\n    // If arguments are missing or incorrectly typed, this is an internal\n    // developer mistake which should throw an early error.\n    assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n\n    const exeContext = buildExecutionContext({\n      schema,\n      document,\n      rootValue,\n      contextValue,\n      variableValues,\n      operationName,\n      subscribeFieldResolver\n    }); // Return early errors if execution context failed.\n\n    if (!('schema' in exeContext)) {\n      return {\n        errors: exeContext\n      };\n    }\n\n    try {\n      const eventStream = yield executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n      if (!isAsyncIterable(eventStream)) {\n        throw new Error('Subscription field must return Async Iterable. ' + `Received: ${inspect(eventStream)}.`);\n      }\n\n      return eventStream;\n    } catch (error) {\n      // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n      // Otherwise treat the error as a system-class error and re-throw it.\n      if (error instanceof GraphQLError) {\n        return {\n          errors: [error]\n        };\n      }\n\n      throw error;\n    }\n  });\n  return _createSourceEventStream.apply(this, arguments);\n}\n\nfunction executeSubscription(_x9) {\n  return _executeSubscription.apply(this, arguments);\n}\n\nfunction _executeSubscription() {\n  _executeSubscription = _asyncToGenerator(function* (exeContext) {\n    const {\n      schema,\n      fragments,\n      operation,\n      variableValues,\n      rootValue\n    } = exeContext;\n    const rootType = schema.getSubscriptionType();\n\n    if (rootType == null) {\n      throw new GraphQLError('Schema is not configured to execute subscription operation.', {\n        nodes: operation\n      });\n    }\n\n    const rootFields = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n    const [responseName, fieldNodes] = [...rootFields.entries()][0];\n    const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n    if (!fieldDef) {\n      const fieldName = fieldNodes[0].name.value;\n      throw new GraphQLError(`The subscription field \"${fieldName}\" is not defined.`, {\n        nodes: fieldNodes\n      });\n    }\n\n    const path = addPath(undefined, responseName, rootType.name);\n    const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n\n    try {\n      var _fieldDef$subscribe; // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n      // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n      // Build a JS object of arguments from the field.arguments AST, using the\n      // variables scope to fulfill any variable references.\n\n\n      const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n      // is provided to every resolve function within an execution. It is commonly\n      // used to represent an authenticated user, or request-specific caches.\n\n      const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n      // AsyncIterable yielding raw payloads.\n\n      const resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n      const eventStream = yield resolveFn(rootValue, args, contextValue, info);\n\n      if (eventStream instanceof Error) {\n        throw eventStream;\n      }\n\n      return eventStream;\n    } catch (error) {\n      throw locatedError(error, fieldNodes, pathToArray(path));\n    }\n  });\n  return _executeSubscription.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql/spring.graphql.client/node_modules/graphql/execution/subscribe.mjs"],"names":["devAssert","inspect","isAsyncIterable","addPath","pathToArray","GraphQLError","locatedError","collectFields","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","execute","getFieldDef","mapAsyncIterator","getArgumentValues","subscribe","args","arguments","length","schema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","resultOrStream","createSourceEventStream","mapSourceToResponse","payload","exeContext","errors","eventStream","executeSubscription","Error","error","fragments","operation","rootType","getSubscriptionType","nodes","rootFields","selectionSet","responseName","fieldNodes","entries","fieldDef","fieldName","name","value","path","undefined","info","_fieldDef$subscribe","resolveFn"],"mappings":"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","sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport {\n  assertValidExecutionArguments,\n  buildExecutionContext,\n  buildResolveInfo,\n  execute,\n  getFieldDef,\n} from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport async function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    subscribeFieldResolver,\n  } = args;\n  const resultOrStream = await createSourceEventStream(\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  );\n\n  if (!isAsyncIterable(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    execute({\n      schema,\n      document,\n      rootValue: payload,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver,\n    }); // Map every source value to a ExecutionResult value as described above.\n\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport async function createSourceEventStream(\n  schema,\n  document,\n  rootValue,\n  contextValue,\n  variableValues,\n  operationName,\n  subscribeFieldResolver,\n) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  }); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${inspect(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  const path = addPath(undefined, responseName, rootType.name);\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}