{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { getFragmentQueryDocument } from \"../../utilities/index.js\";\n\nvar ApolloCache = function () {\n  function ApolloCache() {\n    this.getFragmentDoc = wrap(getFragmentQueryDocument);\n  }\n\n  ApolloCache.prototype.batch = function (options) {\n    var _this = this;\n\n    var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic : options.optimistic === false ? null : void 0;\n    var updateResult;\n    this.performTransaction(function () {\n      return updateResult = options.update(_this);\n    }, optimisticId);\n    return updateResult;\n  };\n\n  ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n    this.performTransaction(transaction, optimisticId);\n  };\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  };\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n\n    return this.read(__assign(__assign({}, options), {\n      rootId: options.id || 'ROOT_QUERY',\n      optimistic: optimistic\n    }));\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = !!options.optimistic;\n    }\n\n    return this.read(__assign(__assign({}, options), {\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      rootId: options.id,\n      optimistic: optimistic\n    }));\n  };\n\n  ApolloCache.prototype.writeQuery = function (_a) {\n    var id = _a.id,\n        data = _a.data,\n        options = __rest(_a, [\"id\", \"data\"]);\n\n    return this.write(Object.assign(options, {\n      dataId: id || 'ROOT_QUERY',\n      result: data\n    }));\n  };\n\n  ApolloCache.prototype.writeFragment = function (_a) {\n    var id = _a.id,\n        data = _a.data,\n        fragment = _a.fragment,\n        fragmentName = _a.fragmentName,\n        options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n\n    return this.write(Object.assign(options, {\n      query: this.getFragmentDoc(fragment, fragmentName),\n      dataId: id,\n      result: data\n    }));\n  };\n\n  ApolloCache.prototype.updateQuery = function (options, update) {\n    return this.batch({\n      update: function (cache) {\n        var value = cache.readQuery(options);\n        var data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeQuery(__assign(__assign({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n\n  ApolloCache.prototype.updateFragment = function (options, update) {\n    return this.batch({\n      update: function (cache) {\n        var value = cache.readFragment(options);\n        var data = update(value);\n        if (data === void 0 || data === null) return value;\n        cache.writeFragment(__assign(__assign({}, options), {\n          data: data\n        }));\n        return data;\n      }\n    });\n  };\n\n  return ApolloCache;\n}();\n\nexport { ApolloCache };","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql.client/node_modules/@apollo/client/cache/core/cache.js"],"names":["__assign","__rest","wrap","getFragmentQueryDocument","ApolloCache","getFragmentDoc","prototype","batch","options","_this","optimisticId","optimistic","updateResult","performTransaction","update","recordOptimisticTransaction","transaction","transformDocument","document","identify","object","gc","modify","transformForLink","readQuery","read","rootId","id","readFragment","query","fragment","fragmentName","writeQuery","_a","data","write","Object","assign","dataId","result","writeFragment","updateQuery","cache","value","updateFragment"],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { getFragmentQueryDocument, } from \"../../utilities/index.js\";\nvar ApolloCache = (function () {\n    function ApolloCache() {\n        this.getFragmentDoc = wrap(getFragmentQueryDocument);\n    }\n    ApolloCache.prototype.batch = function (options) {\n        var _this = this;\n        var optimisticId = typeof options.optimistic === \"string\" ? options.optimistic :\n            options.optimistic === false ? null : void 0;\n        var updateResult;\n        this.performTransaction(function () { return updateResult = options.update(_this); }, optimisticId);\n        return updateResult;\n    };\n    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {\n        this.performTransaction(transaction, optimisticId);\n    };\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { rootId: options.id || 'ROOT_QUERY', optimistic: optimistic }));\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = !!options.optimistic; }\n        return this.read(__assign(__assign({}, options), { query: this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));\n    };\n    ApolloCache.prototype.writeQuery = function (_a) {\n        var id = _a.id, data = _a.data, options = __rest(_a, [\"id\", \"data\"]);\n        return this.write(Object.assign(options, {\n            dataId: id || 'ROOT_QUERY',\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.writeFragment = function (_a) {\n        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = __rest(_a, [\"id\", \"data\", \"fragment\", \"fragmentName\"]);\n        return this.write(Object.assign(options, {\n            query: this.getFragmentDoc(fragment, fragmentName),\n            dataId: id,\n            result: data,\n        }));\n    };\n    ApolloCache.prototype.updateQuery = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readQuery(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeQuery(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    ApolloCache.prototype.updateFragment = function (options, update) {\n        return this.batch({\n            update: function (cache) {\n                var value = cache.readFragment(options);\n                var data = update(value);\n                if (data === void 0 || data === null)\n                    return value;\n                cache.writeFragment(__assign(__assign({}, options), { data: data }));\n                return data;\n            },\n        });\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\n"]},"metadata":{},"sourceType":"module"}