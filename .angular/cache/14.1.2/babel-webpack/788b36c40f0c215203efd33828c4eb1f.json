{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { NetworkStatus, ApolloClient, gql as gql$1 } from '@apollo/client/core';\nimport { Observable, queueScheduler, observable, from } from 'rxjs';\nimport { map, startWith, observeOn } from 'rxjs/operators';\n\nfunction fromPromise(promiseFn) {\n  return new Observable(subscriber => {\n    promiseFn().then(result => {\n      if (!subscriber.closed) {\n        subscriber.next(result);\n        subscriber.complete();\n      }\n    }, error => {\n      if (!subscriber.closed) {\n        subscriber.error(error);\n      }\n    });\n    return () => subscriber.unsubscribe();\n  });\n}\n\nfunction useMutationLoading(source, enabled) {\n  if (!enabled) {\n    return source.pipe(map(result => ({ ...result,\n      loading: false\n    })));\n  }\n\n  return source.pipe(startWith({\n    loading: true\n  }), map(result => ({ ...result,\n    loading: !!result.loading\n  })));\n}\n\nclass ZoneScheduler {\n  constructor(zone) {\n    this.zone = zone;\n    this.now = Date.now ? Date.now : () => +new Date();\n  }\n\n  schedule(work, delay = 0, state) {\n    return this.zone.run(() => queueScheduler.schedule(work, delay, state));\n  }\n\n}\n\nfunction fixObservable(obs) {\n  obs[observable] = () => obs;\n\n  return obs;\n}\n\nfunction wrapWithZone(obs, ngZone) {\n  return obs.pipe(observeOn(new ZoneScheduler(ngZone)));\n}\n\nfunction pickFlag(flags, flag, defaultValue) {\n  return flags && typeof flags[flag] !== 'undefined' ? flags[flag] : defaultValue;\n}\n\nfunction useInitialLoading(obsQuery) {\n  return function useInitialLoadingOperator(source) {\n    return new Observable(function useInitialLoadingSubscription(subscriber) {\n      const currentResult = obsQuery.getCurrentResult();\n      const {\n        loading,\n        errors,\n        error,\n        partial,\n        data\n      } = currentResult;\n      const {\n        partialRefetch,\n        fetchPolicy\n      } = obsQuery.options;\n      const hasError = errors || error;\n\n      if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only' && !loading && !hasError) {\n        subscriber.next({ ...currentResult,\n          loading: true,\n          networkStatus: NetworkStatus.loading\n        });\n      }\n\n      return source.subscribe(subscriber);\n    });\n  };\n}\n\nclass QueryRef {\n  constructor(obsQuery, ngZone, options) {\n    this.obsQuery = obsQuery;\n    const wrapped = wrapWithZone(from(fixObservable(this.obsQuery)), ngZone);\n    this.valueChanges = options.useInitialLoading ? wrapped.pipe(useInitialLoading(this.obsQuery)) : wrapped;\n    this.queryId = this.obsQuery.queryId;\n  } // ObservableQuery's methods\n\n\n  get options() {\n    return this.obsQuery.options;\n  }\n\n  get variables() {\n    return this.obsQuery.variables;\n  }\n\n  result() {\n    return this.obsQuery.result();\n  }\n\n  getCurrentResult() {\n    return this.obsQuery.getCurrentResult();\n  }\n\n  getLastResult() {\n    return this.obsQuery.getLastResult();\n  }\n\n  getLastError() {\n    return this.obsQuery.getLastError();\n  }\n\n  resetLastResults() {\n    return this.obsQuery.resetLastResults();\n  }\n\n  refetch(variables) {\n    return this.obsQuery.refetch(variables);\n  }\n\n  fetchMore(fetchMoreOptions) {\n    return this.obsQuery.fetchMore(fetchMoreOptions);\n  }\n\n  subscribeToMore(options) {\n    // XXX: there's a bug in apollo-client typings\n    // it should not inherit types from ObservableQuery\n    return this.obsQuery.subscribeToMore(options);\n  }\n\n  updateQuery(mapFn) {\n    return this.obsQuery.updateQuery(mapFn);\n  }\n\n  stopPolling() {\n    return this.obsQuery.stopPolling();\n  }\n\n  startPolling(pollInterval) {\n    return this.obsQuery.startPolling(pollInterval);\n  }\n\n  setOptions(opts) {\n    return this.obsQuery.setOptions(opts);\n  }\n\n  setVariables(variables) {\n    return this.obsQuery.setVariables(variables);\n  }\n\n}\n\nconst APOLLO_FLAGS = new InjectionToken('APOLLO_FLAGS');\nconst APOLLO_OPTIONS = new InjectionToken('APOLLO_OPTIONS');\nconst APOLLO_NAMED_OPTIONS = new InjectionToken('APOLLO_NAMED_OPTIONS');\n\nclass ApolloBase {\n  constructor(ngZone, flags, _client) {\n    this.ngZone = ngZone;\n    this.flags = flags;\n    this._client = _client;\n    this.useInitialLoading = pickFlag(flags, 'useInitialLoading', false);\n    this.useMutationLoading = pickFlag(flags, 'useMutationLoading', false);\n  }\n\n  watchQuery(options) {\n    return new QueryRef(this.ensureClient().watchQuery({ ...options\n    }), this.ngZone, {\n      useInitialLoading: this.useInitialLoading,\n      ...options\n    });\n  }\n\n  query(options) {\n    return fromPromise(() => this.ensureClient().query({ ...options\n    }));\n  }\n\n  mutate(options) {\n    return useMutationLoading(fromPromise(() => this.ensureClient().mutate({ ...options\n    })), options.useMutationLoading ?? this.useMutationLoading);\n  }\n\n  subscribe(options, extra) {\n    const obs = from(fixObservable(this.ensureClient().subscribe({ ...options\n    })));\n    return extra && extra.useZone !== true ? obs : wrapWithZone(obs, this.ngZone);\n  }\n  /**\n   * Get an access to an instance of ApolloClient\n   * @deprecated use `apollo.client` instead\n   */\n\n\n  getClient() {\n    return this.client;\n  }\n  /**\n   * Set a new instance of ApolloClient\n   * Remember to clean up the store before setting a new client.\n   * @deprecated use `apollo.client = client` instead\n   *\n   * @param client ApolloClient instance\n   */\n\n\n  setClient(client) {\n    this.client = client;\n  }\n  /**\n   * Get an access to an instance of ApolloClient\n   */\n\n\n  get client() {\n    return this._client;\n  }\n  /**\n   * Set a new instance of ApolloClient\n   * Remember to clean up the store before setting a new client.\n   *\n   * @param client ApolloClient instance\n   */\n\n\n  set client(client) {\n    if (this._client) {\n      throw new Error('Client has been already defined');\n    }\n\n    this._client = client;\n  }\n\n  ensureClient() {\n    this.checkInstance();\n    return this._client;\n  }\n\n  checkInstance() {\n    if (!this._client) {\n      throw new Error('Client has not been defined yet');\n    }\n  }\n\n}\n\nclass Apollo extends ApolloBase {\n  constructor(_ngZone, apolloOptions, apolloNamedOptions, flags) {\n    super(_ngZone, flags);\n    this._ngZone = _ngZone;\n    this.map = new Map();\n\n    if (apolloOptions) {\n      this.createDefault(apolloOptions);\n    }\n\n    if (apolloNamedOptions && typeof apolloNamedOptions === 'object') {\n      for (let name in apolloNamedOptions) {\n        if (apolloNamedOptions.hasOwnProperty(name)) {\n          const options = apolloNamedOptions[name];\n          this.createNamed(name, options);\n        }\n      }\n    }\n  }\n  /**\n   * Create an instance of ApolloClient\n   * @param options Options required to create ApolloClient\n   * @param name client's name\n   */\n\n\n  create(options, name) {\n    if (isDefault(name)) {\n      this.createDefault(options);\n    } else {\n      this.createNamed(name, options);\n    }\n  }\n  /**\n   * Use a default ApolloClient\n   */\n\n\n  default() {\n    return this;\n  }\n  /**\n   * Use a named ApolloClient\n   * @param name client's name\n   */\n\n\n  use(name) {\n    if (isDefault(name)) {\n      return this.default();\n    }\n\n    return this.map.get(name);\n  }\n  /**\n   * Create a default ApolloClient, same as `apollo.create(options)`\n   * @param options ApolloClient's options\n   */\n\n\n  createDefault(options) {\n    if (this.getClient()) {\n      throw new Error('Apollo has been already created.');\n    }\n\n    return this.setClient(new ApolloClient(options));\n  }\n  /**\n   * Create a named ApolloClient, same as `apollo.create(options, name)`\n   * @param name client's name\n   * @param options ApolloClient's options\n   */\n\n\n  createNamed(name, options) {\n    if (this.map.has(name)) {\n      throw new Error(`Client ${name} has been already created`);\n    }\n\n    this.map.set(name, new ApolloBase(this._ngZone, this.flags, new ApolloClient(options)));\n  }\n  /**\n   * Remember to clean up the store before removing a client\n   * @param name client's name\n   */\n\n\n  removeClient(name) {\n    if (isDefault(name)) {\n      this._client = undefined;\n    } else {\n      this.map.delete(name);\n    }\n  }\n\n}\n\nApollo.ɵfac = function Apollo_Factory(t) {\n  return new (t || Apollo)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(APOLLO_OPTIONS, 8), i0.ɵɵinject(APOLLO_NAMED_OPTIONS, 8), i0.ɵɵinject(APOLLO_FLAGS, 8));\n};\n\nApollo.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Apollo,\n  factory: Apollo.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Apollo, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [APOLLO_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [APOLLO_NAMED_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [APOLLO_FLAGS]\n      }]\n    }];\n  }, null);\n})();\n\nfunction isDefault(name) {\n  return !name || name === 'default';\n}\n\nconst PROVIDERS = [Apollo];\n\nclass ApolloModule {}\n\nApolloModule.ɵfac = function ApolloModule_Factory(t) {\n  return new (t || ApolloModule)();\n};\n\nApolloModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ApolloModule\n});\nApolloModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: PROVIDERS\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ApolloModule, [{\n    type: NgModule,\n    args: [{\n      providers: PROVIDERS\n    }]\n  }], null, null);\n})();\n\nclass Query {\n  constructor(apollo) {\n    this.apollo = apollo;\n    this.client = 'default';\n  }\n\n  watch(variables, options) {\n    return this.apollo.use(this.client).watchQuery({ ...options,\n      variables,\n      query: this.document\n    });\n  }\n\n  fetch(variables, options) {\n    return this.apollo.use(this.client).query({ ...options,\n      variables,\n      query: this.document\n    });\n  }\n\n}\n\nQuery.ɵfac = function Query_Factory(t) {\n  return new (t || Query)(i0.ɵɵinject(Apollo));\n};\n\nQuery.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Query,\n  factory: Query.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Query, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Apollo\n    }];\n  }, null);\n})();\n\nclass Mutation {\n  constructor(apollo) {\n    this.apollo = apollo;\n    this.client = 'default';\n  }\n\n  mutate(variables, options) {\n    return this.apollo.use(this.client).mutate({ ...options,\n      variables,\n      mutation: this.document\n    });\n  }\n\n}\n\nMutation.ɵfac = function Mutation_Factory(t) {\n  return new (t || Mutation)(i0.ɵɵinject(Apollo));\n};\n\nMutation.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Mutation,\n  factory: Mutation.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Mutation, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Apollo\n    }];\n  }, null);\n})();\n\nclass Subscription {\n  constructor(apollo) {\n    this.apollo = apollo;\n    this.client = 'default';\n  }\n\n  subscribe(variables, options, extra) {\n    return this.apollo.use(this.client).subscribe({ ...options,\n      variables,\n      query: this.document\n    }, extra);\n  }\n\n}\n\nSubscription.ɵfac = function Subscription_Factory(t) {\n  return new (t || Subscription)(i0.ɵɵinject(Apollo));\n};\n\nSubscription.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Subscription,\n  factory: Subscription.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Subscription, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Apollo\n    }];\n  }, null);\n})();\n\nfunction typedGQLTag(literals, ...placeholders) {\n  return gql$1(literals, ...placeholders);\n}\n\nconst gql = typedGQLTag;\nconst graphql = typedGQLTag;\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APOLLO_FLAGS, APOLLO_NAMED_OPTIONS, APOLLO_OPTIONS, Apollo, ApolloBase, ApolloModule, Mutation, Query, QueryRef, Subscription, gql, graphql };","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql/spring.graphql.client/node_modules/apollo-angular/fesm2020/ngApollo.mjs"],"names":["i0","InjectionToken","Injectable","Optional","Inject","NgModule","NetworkStatus","ApolloClient","gql","gql$1","Observable","queueScheduler","observable","from","map","startWith","observeOn","fromPromise","promiseFn","subscriber","then","result","closed","next","complete","error","unsubscribe","useMutationLoading","source","enabled","pipe","loading","ZoneScheduler","constructor","zone","now","Date","schedule","work","delay","state","run","fixObservable","obs","wrapWithZone","ngZone","pickFlag","flags","flag","defaultValue","useInitialLoading","obsQuery","useInitialLoadingOperator","useInitialLoadingSubscription","currentResult","getCurrentResult","errors","partial","data","partialRefetch","fetchPolicy","options","hasError","Object","keys","length","networkStatus","subscribe","QueryRef","wrapped","valueChanges","queryId","variables","getLastResult","getLastError","resetLastResults","refetch","fetchMore","fetchMoreOptions","subscribeToMore","updateQuery","mapFn","stopPolling","startPolling","pollInterval","setOptions","opts","setVariables","APOLLO_FLAGS","APOLLO_OPTIONS","APOLLO_NAMED_OPTIONS","ApolloBase","_client","watchQuery","ensureClient","query","mutate","extra","useZone","getClient","client","setClient","Error","checkInstance","Apollo","_ngZone","apolloOptions","apolloNamedOptions","Map","createDefault","name","hasOwnProperty","createNamed","create","isDefault","default","use","get","has","set","removeClient","undefined","delete","ɵfac","NgZone","ɵprov","type","decorators","args","PROVIDERS","ApolloModule","ɵmod","ɵinj","providers","Query","apollo","watch","document","fetch","Mutation","mutation","Subscription","typedGQLTag","literals","placeholders","graphql"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport { NetworkStatus, ApolloClient, gql as gql$1 } from '@apollo/client/core';\nimport { Observable, queueScheduler, observable, from } from 'rxjs';\nimport { map, startWith, observeOn } from 'rxjs/operators';\n\nfunction fromPromise(promiseFn) {\n    return new Observable((subscriber) => {\n        promiseFn().then((result) => {\n            if (!subscriber.closed) {\n                subscriber.next(result);\n                subscriber.complete();\n            }\n        }, (error) => {\n            if (!subscriber.closed) {\n                subscriber.error(error);\n            }\n        });\n        return () => subscriber.unsubscribe();\n    });\n}\nfunction useMutationLoading(source, enabled) {\n    if (!enabled) {\n        return source.pipe(map((result) => ({\n            ...result,\n            loading: false,\n        })));\n    }\n    return source.pipe(startWith({\n        loading: true,\n    }), map((result) => ({\n        ...result,\n        loading: !!result.loading,\n    })));\n}\nclass ZoneScheduler {\n    constructor(zone) {\n        this.zone = zone;\n        this.now = Date.now ? Date.now : () => +new Date();\n    }\n    schedule(work, delay = 0, state) {\n        return this.zone.run(() => queueScheduler.schedule(work, delay, state));\n    }\n}\nfunction fixObservable(obs) {\n    obs[observable] = () => obs;\n    return obs;\n}\nfunction wrapWithZone(obs, ngZone) {\n    return obs.pipe(observeOn(new ZoneScheduler(ngZone)));\n}\nfunction pickFlag(flags, flag, defaultValue) {\n    return flags && typeof flags[flag] !== 'undefined'\n        ? flags[flag]\n        : defaultValue;\n}\n\nfunction useInitialLoading(obsQuery) {\n    return function useInitialLoadingOperator(source) {\n        return new Observable(function useInitialLoadingSubscription(subscriber) {\n            const currentResult = obsQuery.getCurrentResult();\n            const { loading, errors, error, partial, data } = currentResult;\n            const { partialRefetch, fetchPolicy } = obsQuery.options;\n            const hasError = errors || error;\n            if (partialRefetch &&\n                partial &&\n                (!data || Object.keys(data).length === 0) &&\n                fetchPolicy !== 'cache-only' &&\n                !loading &&\n                !hasError) {\n                subscriber.next({\n                    ...currentResult,\n                    loading: true,\n                    networkStatus: NetworkStatus.loading,\n                });\n            }\n            return source.subscribe(subscriber);\n        });\n    };\n}\nclass QueryRef {\n    constructor(obsQuery, ngZone, options) {\n        this.obsQuery = obsQuery;\n        const wrapped = wrapWithZone(from(fixObservable(this.obsQuery)), ngZone);\n        this.valueChanges = options.useInitialLoading\n            ? wrapped.pipe(useInitialLoading(this.obsQuery))\n            : wrapped;\n        this.queryId = this.obsQuery.queryId;\n    }\n    // ObservableQuery's methods\n    get options() {\n        return this.obsQuery.options;\n    }\n    get variables() {\n        return this.obsQuery.variables;\n    }\n    result() {\n        return this.obsQuery.result();\n    }\n    getCurrentResult() {\n        return this.obsQuery.getCurrentResult();\n    }\n    getLastResult() {\n        return this.obsQuery.getLastResult();\n    }\n    getLastError() {\n        return this.obsQuery.getLastError();\n    }\n    resetLastResults() {\n        return this.obsQuery.resetLastResults();\n    }\n    refetch(variables) {\n        return this.obsQuery.refetch(variables);\n    }\n    fetchMore(fetchMoreOptions) {\n        return this.obsQuery.fetchMore(fetchMoreOptions);\n    }\n    subscribeToMore(options) {\n        // XXX: there's a bug in apollo-client typings\n        // it should not inherit types from ObservableQuery\n        return this.obsQuery.subscribeToMore(options);\n    }\n    updateQuery(mapFn) {\n        return this.obsQuery.updateQuery(mapFn);\n    }\n    stopPolling() {\n        return this.obsQuery.stopPolling();\n    }\n    startPolling(pollInterval) {\n        return this.obsQuery.startPolling(pollInterval);\n    }\n    setOptions(opts) {\n        return this.obsQuery.setOptions(opts);\n    }\n    setVariables(variables) {\n        return this.obsQuery.setVariables(variables);\n    }\n}\n\nconst APOLLO_FLAGS = new InjectionToken('APOLLO_FLAGS');\nconst APOLLO_OPTIONS = new InjectionToken('APOLLO_OPTIONS');\nconst APOLLO_NAMED_OPTIONS = new InjectionToken('APOLLO_NAMED_OPTIONS');\n\nclass ApolloBase {\n    constructor(ngZone, flags, _client) {\n        this.ngZone = ngZone;\n        this.flags = flags;\n        this._client = _client;\n        this.useInitialLoading = pickFlag(flags, 'useInitialLoading', false);\n        this.useMutationLoading = pickFlag(flags, 'useMutationLoading', false);\n    }\n    watchQuery(options) {\n        return new QueryRef(this.ensureClient().watchQuery({\n            ...options,\n        }), this.ngZone, {\n            useInitialLoading: this.useInitialLoading,\n            ...options,\n        });\n    }\n    query(options) {\n        return fromPromise(() => this.ensureClient().query({ ...options }));\n    }\n    mutate(options) {\n        return useMutationLoading(fromPromise(() => this.ensureClient().mutate({ ...options })), options.useMutationLoading ?? this.useMutationLoading);\n    }\n    subscribe(options, extra) {\n        const obs = from(fixObservable(this.ensureClient().subscribe({ ...options })));\n        return extra && extra.useZone !== true\n            ? obs\n            : wrapWithZone(obs, this.ngZone);\n    }\n    /**\n     * Get an access to an instance of ApolloClient\n     * @deprecated use `apollo.client` instead\n     */\n    getClient() {\n        return this.client;\n    }\n    /**\n     * Set a new instance of ApolloClient\n     * Remember to clean up the store before setting a new client.\n     * @deprecated use `apollo.client = client` instead\n     *\n     * @param client ApolloClient instance\n     */\n    setClient(client) {\n        this.client = client;\n    }\n    /**\n     * Get an access to an instance of ApolloClient\n     */\n    get client() {\n        return this._client;\n    }\n    /**\n     * Set a new instance of ApolloClient\n     * Remember to clean up the store before setting a new client.\n     *\n     * @param client ApolloClient instance\n     */\n    set client(client) {\n        if (this._client) {\n            throw new Error('Client has been already defined');\n        }\n        this._client = client;\n    }\n    ensureClient() {\n        this.checkInstance();\n        return this._client;\n    }\n    checkInstance() {\n        if (!this._client) {\n            throw new Error('Client has not been defined yet');\n        }\n    }\n}\nclass Apollo extends ApolloBase {\n    constructor(_ngZone, apolloOptions, apolloNamedOptions, flags) {\n        super(_ngZone, flags);\n        this._ngZone = _ngZone;\n        this.map = new Map();\n        if (apolloOptions) {\n            this.createDefault(apolloOptions);\n        }\n        if (apolloNamedOptions && typeof apolloNamedOptions === 'object') {\n            for (let name in apolloNamedOptions) {\n                if (apolloNamedOptions.hasOwnProperty(name)) {\n                    const options = apolloNamedOptions[name];\n                    this.createNamed(name, options);\n                }\n            }\n        }\n    }\n    /**\n     * Create an instance of ApolloClient\n     * @param options Options required to create ApolloClient\n     * @param name client's name\n     */\n    create(options, name) {\n        if (isDefault(name)) {\n            this.createDefault(options);\n        }\n        else {\n            this.createNamed(name, options);\n        }\n    }\n    /**\n     * Use a default ApolloClient\n     */\n    default() {\n        return this;\n    }\n    /**\n     * Use a named ApolloClient\n     * @param name client's name\n     */\n    use(name) {\n        if (isDefault(name)) {\n            return this.default();\n        }\n        return this.map.get(name);\n    }\n    /**\n     * Create a default ApolloClient, same as `apollo.create(options)`\n     * @param options ApolloClient's options\n     */\n    createDefault(options) {\n        if (this.getClient()) {\n            throw new Error('Apollo has been already created.');\n        }\n        return this.setClient(new ApolloClient(options));\n    }\n    /**\n     * Create a named ApolloClient, same as `apollo.create(options, name)`\n     * @param name client's name\n     * @param options ApolloClient's options\n     */\n    createNamed(name, options) {\n        if (this.map.has(name)) {\n            throw new Error(`Client ${name} has been already created`);\n        }\n        this.map.set(name, new ApolloBase(this._ngZone, this.flags, new ApolloClient(options)));\n    }\n    /**\n     * Remember to clean up the store before removing a client\n     * @param name client's name\n     */\n    removeClient(name) {\n        if (isDefault(name)) {\n            this._client = undefined;\n        }\n        else {\n            this.map.delete(name);\n        }\n    }\n}\nApollo.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Apollo, deps: [{ token: i0.NgZone }, { token: APOLLO_OPTIONS, optional: true }, { token: APOLLO_NAMED_OPTIONS, optional: true }, { token: APOLLO_FLAGS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nApollo.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Apollo });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Apollo, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [APOLLO_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [APOLLO_NAMED_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [APOLLO_FLAGS]\n                }] }]; } });\nfunction isDefault(name) {\n    return !name || name === 'default';\n}\n\nconst PROVIDERS = [Apollo];\nclass ApolloModule {\n}\nApolloModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: ApolloModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nApolloModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: ApolloModule });\nApolloModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: ApolloModule, providers: PROVIDERS });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: ApolloModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: PROVIDERS,\n                }]\n        }] });\n\nclass Query {\n    constructor(apollo) {\n        this.apollo = apollo;\n        this.client = 'default';\n    }\n    watch(variables, options) {\n        return this.apollo.use(this.client).watchQuery({\n            ...options,\n            variables,\n            query: this.document,\n        });\n    }\n    fetch(variables, options) {\n        return this.apollo.use(this.client).query({\n            ...options,\n            variables,\n            query: this.document,\n        });\n    }\n}\nQuery.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Query, deps: [{ token: Apollo }], target: i0.ɵɵFactoryTarget.Injectable });\nQuery.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Query });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Query, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: Apollo }]; } });\n\nclass Mutation {\n    constructor(apollo) {\n        this.apollo = apollo;\n        this.client = 'default';\n    }\n    mutate(variables, options) {\n        return this.apollo.use(this.client).mutate({\n            ...options,\n            variables,\n            mutation: this.document,\n        });\n    }\n}\nMutation.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Mutation, deps: [{ token: Apollo }], target: i0.ɵɵFactoryTarget.Injectable });\nMutation.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Mutation });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Mutation, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: Apollo }]; } });\n\nclass Subscription {\n    constructor(apollo) {\n        this.apollo = apollo;\n        this.client = 'default';\n    }\n    subscribe(variables, options, extra) {\n        return this.apollo.use(this.client).subscribe({\n            ...options,\n            variables,\n            query: this.document,\n        }, extra);\n    }\n}\nSubscription.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Subscription, deps: [{ token: Apollo }], target: i0.ɵɵFactoryTarget.Injectable });\nSubscription.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Subscription });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: Subscription, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: Apollo }]; } });\n\nfunction typedGQLTag(literals, ...placeholders) {\n    return gql$1(literals, ...placeholders);\n}\nconst gql = typedGQLTag;\nconst graphql = typedGQLTag;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APOLLO_FLAGS, APOLLO_NAMED_OPTIONS, APOLLO_OPTIONS, Apollo, ApolloBase, ApolloModule, Mutation, Query, QueryRef, Subscription, gql, graphql };\n"]},"metadata":{},"sourceType":"module"}