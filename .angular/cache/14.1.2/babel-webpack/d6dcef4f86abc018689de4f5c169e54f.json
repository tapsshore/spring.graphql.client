{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant } from \"../globals/index.js\";\nimport { visit } from 'graphql';\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition } from \"./getFromAST.js\";\nimport { filterInPlace } from \"../common/filterInPlace.js\";\nimport { isField, isInlineFragment } from \"./storeUtils.js\";\nimport { createFragmentMap } from \"./fragments.js\";\nvar TYPENAME_FIELD = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename'\n  }\n};\n\nfunction isEmpty(op, fragments) {\n  return op.selectionSet.selections.every(function (selection) {\n    return selection.kind === 'FragmentSpread' && isEmpty(fragments[selection.name.value], fragments);\n  });\n}\n\nfunction nullIfDocIsEmpty(doc) {\n  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;\n}\n\nfunction getDirectiveMatcher(directives) {\n  return function directiveMatcher(directive) {\n    return directives.some(function (dir) {\n      return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);\n    });\n  };\n}\n\nexport function removeDirectivesFromDocument(directives, doc) {\n  var variablesInUse = Object.create(null);\n  var variablesToRemove = [];\n  var fragmentSpreadsInUse = Object.create(null);\n  var fragmentSpreadsToRemove = [];\n  var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n    Variable: {\n      enter: function (node, _key, parent) {\n        if (parent.kind !== 'VariableDefinition') {\n          variablesInUse[node.name.value] = true;\n        }\n      }\n    },\n    Field: {\n      enter: function (node) {\n        if (directives && node.directives) {\n          var shouldRemoveField = directives.some(function (directive) {\n            return directive.remove;\n          });\n\n          if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {\n            if (node.arguments) {\n              node.arguments.forEach(function (arg) {\n                if (arg.value.kind === 'Variable') {\n                  variablesToRemove.push({\n                    name: arg.value.name.value\n                  });\n                }\n              });\n            }\n\n            if (node.selectionSet) {\n              getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                fragmentSpreadsToRemove.push({\n                  name: frag.name.value\n                });\n              });\n            }\n\n            return null;\n          }\n        }\n      }\n    },\n    FragmentSpread: {\n      enter: function (node) {\n        fragmentSpreadsInUse[node.name.value] = true;\n      }\n    },\n    Directive: {\n      enter: function (node) {\n        if (getDirectiveMatcher(directives)(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n\n  if (modifiedDoc && filterInPlace(variablesToRemove, function (v) {\n    return !!v.name && !variablesInUse[v.name];\n  }).length) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n\n  if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function (fs) {\n    return !!fs.name && !fragmentSpreadsInUse[fs.name];\n  }).length) {\n    modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n  }\n\n  return modifiedDoc;\n}\nexport var addTypenameToDocument = Object.assign(function (doc) {\n  return visit(doc, {\n    SelectionSet: {\n      enter: function (node, _key, parent) {\n        if (parent && parent.kind === 'OperationDefinition') {\n          return;\n        }\n\n        var selections = node.selections;\n\n        if (!selections) {\n          return;\n        }\n\n        var skip = selections.some(function (selection) {\n          return isField(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);\n        });\n\n        if (skip) {\n          return;\n        }\n\n        var field = parent;\n\n        if (isField(field) && field.directives && field.directives.some(function (d) {\n          return d.name.value === 'export';\n        })) {\n          return;\n        }\n\n        return __assign(__assign({}, node), {\n          selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false)\n        });\n      }\n    }\n  });\n}, {\n  added: function (field) {\n    return field === TYPENAME_FIELD;\n  }\n});\nvar connectionRemoveConfig = {\n  test: function (directive) {\n    var willRemove = directive.name.value === 'connection';\n\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        __DEV__ && invariant.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n\n    return willRemove;\n  }\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\n\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  return !!selectionSet && selectionSet.selections && selectionSet.selections.some(function (selection) {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n}\n\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\n\nfunction getArgumentMatcher(config) {\n  return function argumentMatcher(argument) {\n    return config.some(function (aConfig) {\n      return argument.value && argument.value.kind === 'Variable' && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n    });\n  };\n}\n\nexport function removeArgumentsFromDocument(config, doc) {\n  var argMatcher = getArgumentMatcher(config);\n  return nullIfDocIsEmpty(visit(doc, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n            return !config.some(function (arg) {\n              return arg.name === varDef.variable.name.value;\n            });\n          }) : []\n        });\n      }\n    },\n    Field: {\n      enter: function (node) {\n        var shouldRemoveField = config.some(function (argConfig) {\n          return argConfig.remove;\n        });\n\n        if (shouldRemoveField) {\n          var argMatchCount_1 = 0;\n\n          if (node.arguments) {\n            node.arguments.forEach(function (arg) {\n              if (argMatcher(arg)) {\n                argMatchCount_1 += 1;\n              }\n            });\n          }\n\n          if (argMatchCount_1 === 1) {\n            return null;\n          }\n        }\n      }\n    },\n    Argument: {\n      enter: function (node) {\n        if (argMatcher(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n  function enter(node) {\n    if (config.some(function (def) {\n      return def.name === node.name.value;\n    })) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(visit(doc, {\n    FragmentSpread: {\n      enter: enter\n    },\n    FragmentDefinition: {\n      enter: enter\n    }\n  }));\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n  var allFragments = [];\n  selectionSet.selections.forEach(function (selection) {\n    if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) {\n        return allFragments.push(frag);\n      });\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n  return allFragments;\n}\n\nexport function buildQueryFromSelectionSet(document) {\n  var definition = getMainDefinition(document);\n  var definitionOperation = definition.operation;\n\n  if (definitionOperation === 'query') {\n    return document;\n  }\n\n  var modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          operation: 'query'\n        });\n      }\n    }\n  });\n  return modifiedDoc;\n}\nexport function removeClientSetsFromDocument(document) {\n  checkDocument(document);\n  var modifiedDoc = removeDirectivesFromDocument([{\n    test: function (directive) {\n      return directive.name.value === 'client';\n    },\n    remove: true\n  }], document);\n\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter: function (node) {\n          if (node.selectionSet) {\n            var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n              return isField(selection) && selection.name.value === '__typename';\n            });\n\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        }\n      }\n    });\n  }\n\n  return modifiedDoc;\n}","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql/spring.graphql.client/node_modules/@apollo/client/utilities/graphql/transform.js"],"names":["__assign","__spreadArray","invariant","visit","checkDocument","getOperationDefinition","getFragmentDefinition","getFragmentDefinitions","getMainDefinition","filterInPlace","isField","isInlineFragment","createFragmentMap","TYPENAME_FIELD","kind","name","value","isEmpty","op","fragments","selectionSet","selections","every","selection","nullIfDocIsEmpty","doc","getDirectiveMatcher","directives","directiveMatcher","directive","some","dir","test","removeDirectivesFromDocument","variablesInUse","Object","create","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","Variable","enter","node","_key","parent","Field","shouldRemoveField","remove","arguments","forEach","arg","push","getAllFragmentSpreadsFromSelectionSet","frag","FragmentSpread","Directive","v","length","removeArgumentsFromDocument","fs","removeFragmentSpreadFromDocument","addTypenameToDocument","assign","SelectionSet","skip","lastIndexOf","field","d","added","connectionRemoveConfig","willRemove","__DEV__","warn","removeConnectionDirectiveFromDocument","hasDirectivesInSelectionSet","nestedCheck","hasDirectivesInSelection","getArgumentMatcher","config","argumentMatcher","argument","aConfig","argMatcher","OperationDefinition","variableDefinitions","filter","varDef","variable","argConfig","argMatchCount_1","Argument","def","FragmentDefinition","allFragments","buildQueryFromSelectionSet","document","definition","definitionOperation","operation","removeClientSetsFromDocument","isTypenameOnly"],"mappings":"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","sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { invariant } from \"../globals/index.js\";\nimport { visit, } from 'graphql';\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition, } from \"./getFromAST.js\";\nimport { filterInPlace } from \"../common/filterInPlace.js\";\nimport { isField, isInlineFragment } from \"./storeUtils.js\";\nimport { createFragmentMap, } from \"./fragments.js\";\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !!v.name && !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !!fs.name && !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nexport var addTypenameToDocument = Object.assign(function (doc) {\n    return visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === 'export'; })) {\n                    return;\n                }\n                return __assign(__assign({}, node), { selections: __spreadArray(__spreadArray([], selections, true), [TYPENAME_FIELD], false) });\n            },\n        },\n    });\n}, {\n    added: function (field) {\n        return field === TYPENAME_FIELD;\n    },\n});\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                __DEV__ && invariant.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (!!selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!isField(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nexport function removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) : [] });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function (arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((isField(selection) || isInlineFragment(selection)) &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nexport function buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nexport function removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return isField(selection) && selection.name.value === '__typename';\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n"]},"metadata":{},"sourceType":"module"}