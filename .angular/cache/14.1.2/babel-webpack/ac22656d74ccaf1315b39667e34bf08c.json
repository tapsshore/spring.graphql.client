{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Observable } from \"../../utilities/index.js\";\n\nvar OperationBatcher = function () {\n  function OperationBatcher(_a) {\n    var batchDebounce = _a.batchDebounce,\n        batchInterval = _a.batchInterval,\n        batchMax = _a.batchMax,\n        batchHandler = _a.batchHandler,\n        batchKey = _a.batchKey;\n    this.batchesByKey = new Map();\n    this.batchDebounce = batchDebounce;\n    this.batchInterval = batchInterval;\n    this.batchMax = batchMax || 0;\n    this.batchHandler = batchHandler;\n\n    this.batchKey = batchKey || function () {\n      return '';\n    };\n  }\n\n  OperationBatcher.prototype.enqueueRequest = function (request) {\n    var _this = this;\n\n    var requestCopy = __assign(__assign({}, request), {\n      next: [],\n      error: [],\n      complete: [],\n      subscribers: new Set()\n    });\n\n    var key = this.batchKey(request.operation);\n\n    if (!requestCopy.observable) {\n      requestCopy.observable = new Observable(function (observer) {\n        var batch = _this.batchesByKey.get(key);\n\n        if (!batch) _this.batchesByKey.set(key, batch = new Set());\n        var isFirstEnqueuedRequest = batch.size === 0;\n        var isFirstSubscriber = requestCopy.subscribers.size === 0;\n        requestCopy.subscribers.add(observer);\n\n        if (isFirstSubscriber) {\n          batch.add(requestCopy);\n        }\n\n        if (observer.next) {\n          requestCopy.next.push(observer.next.bind(observer));\n        }\n\n        if (observer.error) {\n          requestCopy.error.push(observer.error.bind(observer));\n        }\n\n        if (observer.complete) {\n          requestCopy.complete.push(observer.complete.bind(observer));\n        }\n\n        if (isFirstEnqueuedRequest) {\n          _this.scheduleQueueConsumption(key);\n        } else if (_this.batchDebounce) {\n          clearTimeout(_this.scheduledBatchTimer);\n\n          _this.scheduleQueueConsumption(key);\n        }\n\n        if (batch.size === _this.batchMax) {\n          _this.consumeQueue(key);\n        }\n\n        return function () {\n          var _a;\n\n          if (requestCopy.subscribers.delete(observer) && requestCopy.subscribers.size < 1) {\n            if (batch.delete(requestCopy) && batch.size < 1) {\n              clearTimeout(_this.scheduledBatchTimer);\n\n              _this.batchesByKey.delete(key);\n\n              (_a = batch.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n            }\n          }\n        };\n      });\n    }\n\n    return requestCopy.observable;\n  };\n\n  OperationBatcher.prototype.consumeQueue = function (key) {\n    if (key === void 0) {\n      key = '';\n    }\n\n    var batch = this.batchesByKey.get(key);\n    this.batchesByKey.delete(key);\n\n    if (!batch || !batch.size) {\n      return;\n    }\n\n    var operations = [];\n    var forwards = [];\n    var observables = [];\n    var nexts = [];\n    var errors = [];\n    var completes = [];\n    batch.forEach(function (request) {\n      operations.push(request.operation);\n      forwards.push(request.forward);\n      observables.push(request.observable);\n      nexts.push(request.next);\n      errors.push(request.error);\n      completes.push(request.complete);\n    });\n    var batchedObservable = this.batchHandler(operations, forwards) || Observable.of();\n\n    var onError = function (error) {\n      errors.forEach(function (rejecters) {\n        if (rejecters) {\n          rejecters.forEach(function (e) {\n            return e(error);\n          });\n        }\n      });\n    };\n\n    batch.subscription = batchedObservable.subscribe({\n      next: function (results) {\n        if (!Array.isArray(results)) {\n          results = [results];\n        }\n\n        if (nexts.length !== results.length) {\n          var error = new Error(\"server returned results with length \".concat(results.length, \", expected length of \").concat(nexts.length));\n          error.result = results;\n          return onError(error);\n        }\n\n        results.forEach(function (result, index) {\n          if (nexts[index]) {\n            nexts[index].forEach(function (next) {\n              return next(result);\n            });\n          }\n        });\n      },\n      error: onError,\n      complete: function () {\n        completes.forEach(function (complete) {\n          if (complete) {\n            complete.forEach(function (c) {\n              return c();\n            });\n          }\n        });\n      }\n    });\n    return observables;\n  };\n\n  OperationBatcher.prototype.scheduleQueueConsumption = function (key) {\n    var _this = this;\n\n    this.scheduledBatchTimer = setTimeout(function () {\n      _this.consumeQueue(key);\n    }, this.batchInterval);\n  };\n\n  return OperationBatcher;\n}();\n\nexport { OperationBatcher };","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql/spring.graphql.client/node_modules/@apollo/client/link/batch/batching.js"],"names":["__assign","Observable","OperationBatcher","_a","batchDebounce","batchInterval","batchMax","batchHandler","batchKey","batchesByKey","Map","prototype","enqueueRequest","request","_this","requestCopy","next","error","complete","subscribers","Set","key","operation","observable","observer","batch","get","set","isFirstEnqueuedRequest","size","isFirstSubscriber","add","push","bind","scheduleQueueConsumption","clearTimeout","scheduledBatchTimer","consumeQueue","delete","subscription","unsubscribe","operations","forwards","observables","nexts","errors","completes","forEach","forward","batchedObservable","of","onError","rejecters","e","subscribe","results","Array","isArray","length","Error","concat","result","index","c","setTimeout"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { Observable } from \"../../utilities/index.js\";\nvar OperationBatcher = (function () {\n    function OperationBatcher(_a) {\n        var batchDebounce = _a.batchDebounce, batchInterval = _a.batchInterval, batchMax = _a.batchMax, batchHandler = _a.batchHandler, batchKey = _a.batchKey;\n        this.batchesByKey = new Map();\n        this.batchDebounce = batchDebounce;\n        this.batchInterval = batchInterval;\n        this.batchMax = batchMax || 0;\n        this.batchHandler = batchHandler;\n        this.batchKey = batchKey || (function () { return ''; });\n    }\n    OperationBatcher.prototype.enqueueRequest = function (request) {\n        var _this = this;\n        var requestCopy = __assign(__assign({}, request), { next: [], error: [], complete: [], subscribers: new Set() });\n        var key = this.batchKey(request.operation);\n        if (!requestCopy.observable) {\n            requestCopy.observable = new Observable(function (observer) {\n                var batch = _this.batchesByKey.get(key);\n                if (!batch)\n                    _this.batchesByKey.set(key, batch = new Set());\n                var isFirstEnqueuedRequest = batch.size === 0;\n                var isFirstSubscriber = requestCopy.subscribers.size === 0;\n                requestCopy.subscribers.add(observer);\n                if (isFirstSubscriber) {\n                    batch.add(requestCopy);\n                }\n                if (observer.next) {\n                    requestCopy.next.push(observer.next.bind(observer));\n                }\n                if (observer.error) {\n                    requestCopy.error.push(observer.error.bind(observer));\n                }\n                if (observer.complete) {\n                    requestCopy.complete.push(observer.complete.bind(observer));\n                }\n                if (isFirstEnqueuedRequest) {\n                    _this.scheduleQueueConsumption(key);\n                }\n                else if (_this.batchDebounce) {\n                    clearTimeout(_this.scheduledBatchTimer);\n                    _this.scheduleQueueConsumption(key);\n                }\n                if (batch.size === _this.batchMax) {\n                    _this.consumeQueue(key);\n                }\n                return function () {\n                    var _a;\n                    if (requestCopy.subscribers.delete(observer) &&\n                        requestCopy.subscribers.size < 1) {\n                        if (batch.delete(requestCopy) && batch.size < 1) {\n                            clearTimeout(_this.scheduledBatchTimer);\n                            _this.batchesByKey.delete(key);\n                            (_a = batch.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n                        }\n                    }\n                };\n            });\n        }\n        return requestCopy.observable;\n    };\n    OperationBatcher.prototype.consumeQueue = function (key) {\n        if (key === void 0) { key = ''; }\n        var batch = this.batchesByKey.get(key);\n        this.batchesByKey.delete(key);\n        if (!batch || !batch.size) {\n            return;\n        }\n        var operations = [];\n        var forwards = [];\n        var observables = [];\n        var nexts = [];\n        var errors = [];\n        var completes = [];\n        batch.forEach(function (request) {\n            operations.push(request.operation);\n            forwards.push(request.forward);\n            observables.push(request.observable);\n            nexts.push(request.next);\n            errors.push(request.error);\n            completes.push(request.complete);\n        });\n        var batchedObservable = this.batchHandler(operations, forwards) || Observable.of();\n        var onError = function (error) {\n            errors.forEach(function (rejecters) {\n                if (rejecters) {\n                    rejecters.forEach(function (e) { return e(error); });\n                }\n            });\n        };\n        batch.subscription = batchedObservable.subscribe({\n            next: function (results) {\n                if (!Array.isArray(results)) {\n                    results = [results];\n                }\n                if (nexts.length !== results.length) {\n                    var error = new Error(\"server returned results with length \".concat(results.length, \", expected length of \").concat(nexts.length));\n                    error.result = results;\n                    return onError(error);\n                }\n                results.forEach(function (result, index) {\n                    if (nexts[index]) {\n                        nexts[index].forEach(function (next) { return next(result); });\n                    }\n                });\n            },\n            error: onError,\n            complete: function () {\n                completes.forEach(function (complete) {\n                    if (complete) {\n                        complete.forEach(function (c) { return c(); });\n                    }\n                });\n            },\n        });\n        return observables;\n    };\n    OperationBatcher.prototype.scheduleQueueConsumption = function (key) {\n        var _this = this;\n        this.scheduledBatchTimer = setTimeout(function () {\n            _this.consumeQueue(key);\n        }, this.batchInterval);\n    };\n    return OperationBatcher;\n}());\nexport { OperationBatcher };\n"]},"metadata":{},"sourceType":"module"}