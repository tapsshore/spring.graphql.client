{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport \"./fixPolyfills.js\";\nimport { wrap } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { ApolloCache } from \"../core/cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { addTypenameToDocument, isReference } from \"../../utilities/index.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\n\nvar InMemoryCache = function (_super) {\n  __extends(InMemoryCache, _super);\n\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.watches = new Set();\n    _this.typenameDocumentCache = new Map();\n    _this.makeVar = makeVar;\n    _this.txCount = 0;\n    _this.config = normalizeConfig(config);\n    _this.addTypename = !!_this.config.addTypename;\n    _this.policies = new Policies({\n      cache: _this,\n      dataIdFromObject: _this.config.dataIdFromObject,\n      possibleTypes: _this.config.possibleTypes,\n      typePolicies: _this.config.typePolicies\n    });\n\n    _this.init();\n\n    return _this;\n  }\n\n  InMemoryCache.prototype.init = function () {\n    var rootStore = this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching\n    });\n    this.optimisticData = rootStore.stump;\n    this.resetResultCache();\n  };\n\n  InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {\n    var _this = this;\n\n    var previousReader = this.storeReader;\n    this.storeWriter = new StoreWriter(this, this.storeReader = new StoreReader({\n      cache: this,\n      addTypename: this.addTypename,\n      resultCacheMaxSize: this.config.resultCacheMaxSize,\n      canonizeResults: shouldCanonizeResults(this.config),\n      canon: resetResultIdentities ? void 0 : previousReader && previousReader.canon\n    }));\n    this.maybeBroadcastWatch = wrap(function (c, options) {\n      return _this.broadcastWatch(c, options);\n    }, {\n      max: this.config.resultCacheMaxSize,\n      makeCacheKey: function (c) {\n        var store = c.optimistic ? _this.optimisticData : _this.data;\n\n        if (supportsResultCaching(store)) {\n          var optimistic = c.optimistic,\n              rootId = c.rootId,\n              variables = c.variables;\n          return store.makeCacheKey(c.query, c.callback, canonicalStringify({\n            optimistic: optimistic,\n            rootId: rootId,\n            variables: variables\n          }));\n        }\n      }\n    });\n    new Set([this.data.group, this.optimisticData.group]).forEach(function (group) {\n      return group.resetCaching();\n    });\n  };\n\n  InMemoryCache.prototype.restore = function (data) {\n    this.init();\n    if (data) this.data.replace(data);\n    return this;\n  };\n\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return (optimistic ? this.optimisticData : this.data).extract();\n  };\n\n  InMemoryCache.prototype.read = function (options) {\n    var _a = options.returnPartialData,\n        returnPartialData = _a === void 0 ? false : _a;\n\n    try {\n      return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), {\n        store: options.optimistic ? this.optimisticData : this.data,\n        config: this.config,\n        returnPartialData: returnPartialData\n      })).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        return null;\n      }\n\n      throw e;\n    }\n  };\n\n  InMemoryCache.prototype.write = function (options) {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore(this.data, options);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.modify = function (options) {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      return false;\n    }\n\n    var store = options.optimistic ? this.optimisticData : this.data;\n\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.diff = function (options) {\n    return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), {\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      config: this.config\n    }));\n  };\n\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n\n    if (!this.watches.size) {\n      recallCache(this);\n    }\n\n    this.watches.add(watch);\n\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n\n    return function () {\n      if (_this.watches.delete(watch) && !_this.watches.size) {\n        forgetCache(_this);\n      }\n\n      _this.maybeBroadcastWatch.forget(watch);\n    };\n  };\n\n  InMemoryCache.prototype.gc = function (options) {\n    canonicalStringify.reset();\n    var ids = this.optimisticData.gc();\n\n    if (options && !this.txCount) {\n      if (options.resetResultCache) {\n        this.resetResultCache(options.resetResultIdentities);\n      } else if (options.resetResultIdentities) {\n        this.storeReader.resetCanon();\n      }\n    }\n\n    return ids;\n  };\n\n  InMemoryCache.prototype.retain = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  };\n\n  InMemoryCache.prototype.release = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  };\n\n  InMemoryCache.prototype.identify = function (object) {\n    if (isReference(object)) return object.__ref;\n\n    try {\n      return this.policies.identify(object)[0];\n    } catch (e) {\n      __DEV__ && invariant.warn(e);\n    }\n  };\n\n  InMemoryCache.prototype.evict = function (options) {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        return false;\n      }\n\n      options = __assign(__assign({}, options), {\n        id: \"ROOT_QUERY\"\n      });\n    }\n\n    try {\n      ++this.txCount;\n      return this.optimisticData.evict(options, this.data);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.reset = function (options) {\n    var _this = this;\n\n    this.init();\n    canonicalStringify.reset();\n\n    if (options && options.discardWatches) {\n      this.watches.forEach(function (watch) {\n        return _this.maybeBroadcastWatch.forget(watch);\n      });\n      this.watches.clear();\n      forgetCache(this);\n    } else {\n      this.broadcastWatches();\n    }\n\n    return Promise.resolve();\n  };\n\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  };\n\n  InMemoryCache.prototype.batch = function (options) {\n    var _this = this;\n\n    var update = options.update,\n        _a = options.optimistic,\n        optimistic = _a === void 0 ? true : _a,\n        removeOptimistic = options.removeOptimistic,\n        onWatchUpdated = options.onWatchUpdated;\n    var updateResult;\n\n    var perform = function (layer) {\n      var _a = _this,\n          data = _a.data,\n          optimisticData = _a.optimisticData;\n      ++_this.txCount;\n\n      if (layer) {\n        _this.data = _this.optimisticData = layer;\n      }\n\n      try {\n        return updateResult = update(_this);\n      } finally {\n        --_this.txCount;\n        _this.data = data;\n        _this.optimisticData = optimisticData;\n      }\n    };\n\n    var alreadyDirty = new Set();\n\n    if (onWatchUpdated && !this.txCount) {\n      this.broadcastWatches(__assign(__assign({}, options), {\n        onWatchUpdated: function (watch) {\n          alreadyDirty.add(watch);\n          return false;\n        }\n      }));\n    }\n\n    if (typeof optimistic === 'string') {\n      this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n    } else if (optimistic === false) {\n      perform(this.data);\n    } else {\n      perform();\n    }\n\n    if (typeof removeOptimistic === \"string\") {\n      this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n    }\n\n    if (onWatchUpdated && alreadyDirty.size) {\n      this.broadcastWatches(__assign(__assign({}, options), {\n        onWatchUpdated: function (watch, diff) {\n          var result = onWatchUpdated.call(this, watch, diff);\n\n          if (result !== false) {\n            alreadyDirty.delete(watch);\n          }\n\n          return result;\n        }\n      }));\n\n      if (alreadyDirty.size) {\n        alreadyDirty.forEach(function (watch) {\n          return _this.maybeBroadcastWatch.dirty(watch);\n        });\n      }\n    } else {\n      this.broadcastWatches(options);\n    }\n\n    return updateResult;\n  };\n\n  InMemoryCache.prototype.performTransaction = function (update, optimisticId) {\n    return this.batch({\n      update: update,\n      optimistic: optimisticId || optimisticId !== null\n    });\n  };\n\n  InMemoryCache.prototype.transformDocument = function (document) {\n    if (this.addTypename) {\n      var result = this.typenameDocumentCache.get(document);\n\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        this.typenameDocumentCache.set(result, result);\n      }\n\n      return result;\n    }\n\n    return document;\n  };\n\n  InMemoryCache.prototype.broadcastWatches = function (options) {\n    var _this = this;\n\n    if (!this.txCount) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c, options);\n      });\n    }\n  };\n\n  InMemoryCache.prototype.broadcastWatch = function (c, options) {\n    var lastDiff = c.lastDiff;\n    var diff = this.diff(c);\n\n    if (options) {\n      if (c.optimistic && typeof options.optimistic === \"string\") {\n        diff.fromOptimisticTransaction = true;\n      }\n\n      if (options.onWatchUpdated && options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n        return;\n      }\n    }\n\n    if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n      c.callback(c.lastDiff = diff, lastDiff);\n    }\n  };\n\n  return InMemoryCache;\n}(ApolloCache);\n\nexport { InMemoryCache };","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql.client/node_modules/@apollo/client/cache/inmemory/inMemoryCache.js"],"names":["__assign","__extends","invariant","wrap","equal","ApolloCache","MissingFieldError","addTypenameToDocument","isReference","StoreReader","StoreWriter","EntityStore","supportsResultCaching","makeVar","forgetCache","recallCache","Policies","hasOwn","normalizeConfig","shouldCanonizeResults","canonicalStringify","InMemoryCache","_super","config","_this","call","watches","Set","typenameDocumentCache","Map","txCount","addTypename","policies","cache","dataIdFromObject","possibleTypes","typePolicies","init","prototype","rootStore","data","Root","resultCaching","optimisticData","stump","resetResultCache","resetResultIdentities","previousReader","storeReader","storeWriter","resultCacheMaxSize","canonizeResults","canon","maybeBroadcastWatch","c","options","broadcastWatch","max","makeCacheKey","store","optimistic","rootId","variables","query","callback","group","forEach","resetCaching","restore","replace","extract","read","_a","returnPartialData","diffQueryAgainstStore","result","e","write","writeToStore","broadcast","broadcastWatches","modify","id","fields","diff","watch","size","add","immediate","delete","forget","gc","reset","ids","resetCanon","retain","release","identify","object","__ref","__DEV__","warn","evict","discardWatches","clear","Promise","resolve","removeOptimistic","idToRemove","newOptimisticData","removeLayer","batch","update","onWatchUpdated","updateResult","perform","layer","alreadyDirty","addLayer","dirty","performTransaction","optimisticId","transformDocument","document","get","set","lastDiff","fromOptimisticTransaction"],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport \"./fixPolyfills.js\";\nimport { wrap } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { ApolloCache } from \"../core/cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { addTypenameToDocument, isReference, } from \"../../utilities/index.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { Policies } from \"./policies.js\";\nimport { hasOwn, normalizeConfig, shouldCanonizeResults } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nvar InMemoryCache = (function (_super) {\n    __extends(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.typenameDocumentCache = new Map();\n        _this.makeVar = makeVar;\n        _this.txCount = 0;\n        _this.config = normalizeConfig(config);\n        _this.addTypename = !!_this.config.addTypename;\n        _this.policies = new Policies({\n            cache: _this,\n            dataIdFromObject: _this.config.dataIdFromObject,\n            possibleTypes: _this.config.possibleTypes,\n            typePolicies: _this.config.typePolicies,\n        });\n        _this.init();\n        return _this;\n    }\n    InMemoryCache.prototype.init = function () {\n        var rootStore = this.data = new EntityStore.Root({\n            policies: this.policies,\n            resultCaching: this.config.resultCaching,\n        });\n        this.optimisticData = rootStore.stump;\n        this.resetResultCache();\n    };\n    InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {\n        var _this = this;\n        var previousReader = this.storeReader;\n        this.storeWriter = new StoreWriter(this, this.storeReader = new StoreReader({\n            cache: this,\n            addTypename: this.addTypename,\n            resultCacheMaxSize: this.config.resultCacheMaxSize,\n            canonizeResults: shouldCanonizeResults(this.config),\n            canon: resetResultIdentities\n                ? void 0\n                : previousReader && previousReader.canon,\n        }));\n        this.maybeBroadcastWatch = wrap(function (c, options) {\n            return _this.broadcastWatch(c, options);\n        }, {\n            max: this.config.resultCacheMaxSize,\n            makeCacheKey: function (c) {\n                var store = c.optimistic ? _this.optimisticData : _this.data;\n                if (supportsResultCaching(store)) {\n                    var optimistic = c.optimistic, rootId = c.rootId, variables = c.variables;\n                    return store.makeCacheKey(c.query, c.callback, canonicalStringify({ optimistic: optimistic, rootId: rootId, variables: variables }));\n                }\n            }\n        });\n        new Set([\n            this.data.group,\n            this.optimisticData.group,\n        ]).forEach(function (group) { return group.resetCaching(); });\n    };\n    InMemoryCache.prototype.restore = function (data) {\n        this.init();\n        if (data)\n            this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function (optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return (optimistic ? this.optimisticData : this.data).extract();\n    };\n    InMemoryCache.prototype.read = function (options) {\n        var _a = options.returnPartialData, returnPartialData = _a === void 0 ? false : _a;\n        try {\n            return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, config: this.config, returnPartialData: returnPartialData })).result || null;\n        }\n        catch (e) {\n            if (e instanceof MissingFieldError) {\n                return null;\n            }\n            throw e;\n        }\n    };\n    InMemoryCache.prototype.write = function (options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore(this.data, options);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.modify = function (options) {\n        if (hasOwn.call(options, \"id\") && !options.id) {\n            return false;\n        }\n        var store = options.optimistic\n            ? this.optimisticData\n            : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.diff = function (options) {\n        return this.storeReader.diffQueryAgainstStore(__assign(__assign({}, options), { store: options.optimistic ? this.optimisticData : this.data, rootId: options.id || \"ROOT_QUERY\", config: this.config }));\n    };\n    InMemoryCache.prototype.watch = function (watch) {\n        var _this = this;\n        if (!this.watches.size) {\n            recallCache(this);\n        }\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return function () {\n            if (_this.watches.delete(watch) && !_this.watches.size) {\n                forgetCache(_this);\n            }\n            _this.maybeBroadcastWatch.forget(watch);\n        };\n    };\n    InMemoryCache.prototype.gc = function (options) {\n        canonicalStringify.reset();\n        var ids = this.optimisticData.gc();\n        if (options && !this.txCount) {\n            if (options.resetResultCache) {\n                this.resetResultCache(options.resetResultIdentities);\n            }\n            else if (options.resetResultIdentities) {\n                this.storeReader.resetCanon();\n            }\n        }\n        return ids;\n    };\n    InMemoryCache.prototype.retain = function (rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    };\n    InMemoryCache.prototype.release = function (rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    };\n    InMemoryCache.prototype.identify = function (object) {\n        if (isReference(object))\n            return object.__ref;\n        try {\n            return this.policies.identify(object)[0];\n        }\n        catch (e) {\n            __DEV__ && invariant.warn(e);\n        }\n    };\n    InMemoryCache.prototype.evict = function (options) {\n        if (!options.id) {\n            if (hasOwn.call(options, \"id\")) {\n                return false;\n            }\n            options = __assign(__assign({}, options), { id: \"ROOT_QUERY\" });\n        }\n        try {\n            ++this.txCount;\n            return this.optimisticData.evict(options, this.data);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.reset = function (options) {\n        var _this = this;\n        this.init();\n        canonicalStringify.reset();\n        if (options && options.discardWatches) {\n            this.watches.forEach(function (watch) { return _this.maybeBroadcastWatch.forget(watch); });\n            this.watches.clear();\n            forgetCache(this);\n        }\n        else {\n            this.broadcastWatches();\n        }\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.batch = function (options) {\n        var _this = this;\n        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;\n        var updateResult;\n        var perform = function (layer) {\n            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;\n            ++_this.txCount;\n            if (layer) {\n                _this.data = _this.optimisticData = layer;\n            }\n            try {\n                return updateResult = update(_this);\n            }\n            finally {\n                --_this.txCount;\n                _this.data = data;\n                _this.optimisticData = optimisticData;\n            }\n        };\n        var alreadyDirty = new Set();\n        if (onWatchUpdated && !this.txCount) {\n            this.broadcastWatches(__assign(__assign({}, options), { onWatchUpdated: function (watch) {\n                    alreadyDirty.add(watch);\n                    return false;\n                } }));\n        }\n        if (typeof optimistic === 'string') {\n            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);\n        }\n        else if (optimistic === false) {\n            perform(this.data);\n        }\n        else {\n            perform();\n        }\n        if (typeof removeOptimistic === \"string\") {\n            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);\n        }\n        if (onWatchUpdated && alreadyDirty.size) {\n            this.broadcastWatches(__assign(__assign({}, options), { onWatchUpdated: function (watch, diff) {\n                    var result = onWatchUpdated.call(this, watch, diff);\n                    if (result !== false) {\n                        alreadyDirty.delete(watch);\n                    }\n                    return result;\n                } }));\n            if (alreadyDirty.size) {\n                alreadyDirty.forEach(function (watch) { return _this.maybeBroadcastWatch.dirty(watch); });\n            }\n        }\n        else {\n            this.broadcastWatches(options);\n        }\n        return updateResult;\n    };\n    InMemoryCache.prototype.performTransaction = function (update, optimisticId) {\n        return this.batch({\n            update: update,\n            optimistic: optimisticId || (optimisticId !== null),\n        });\n    };\n    InMemoryCache.prototype.transformDocument = function (document) {\n        if (this.addTypename) {\n            var result = this.typenameDocumentCache.get(document);\n            if (!result) {\n                result = addTypenameToDocument(document);\n                this.typenameDocumentCache.set(document, result);\n                this.typenameDocumentCache.set(result, result);\n            }\n            return result;\n        }\n        return document;\n    };\n    InMemoryCache.prototype.broadcastWatches = function (options) {\n        var _this = this;\n        if (!this.txCount) {\n            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c, options); });\n        }\n    };\n    InMemoryCache.prototype.broadcastWatch = function (c, options) {\n        var lastDiff = c.lastDiff;\n        var diff = this.diff(c);\n        if (options) {\n            if (c.optimistic &&\n                typeof options.optimistic === \"string\") {\n                diff.fromOptimisticTransaction = true;\n            }\n            if (options.onWatchUpdated &&\n                options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {\n                return;\n            }\n        }\n        if (!lastDiff || !equal(lastDiff.result, diff.result)) {\n            c.callback(c.lastDiff = diff, lastDiff);\n        }\n    };\n    return InMemoryCache;\n}(ApolloCache));\nexport { InMemoryCache };\n"]},"metadata":{},"sourceType":"module"}