{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { ApolloLink, Observable as Observable$1 } from '@apollo/client/core';\nimport { print } from 'graphql';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BatchLink } from '@apollo/client/link/batch';\n\nconst fetch = (req, httpClient, extractFiles) => {\n  const shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;\n\n  const shouldStringify = param => ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;\n\n  const isBatching = req.body.length;\n  let shouldUseMultipart = req.options && req.options.useMultipart;\n  let multipartInfo;\n\n  if (shouldUseMultipart) {\n    if (isBatching) {\n      return new Observable(observer => observer.error(new Error('File upload is not available when combined with Batching')));\n    }\n\n    if (!shouldUseBody) {\n      return new Observable(observer => observer.error(new Error('File upload is not available when GET is used')));\n    }\n\n    if (!extractFiles) {\n      return new Observable(observer => observer.error(new Error(`To use File upload you need to pass \"extractFiles\" function from \"extract-files\" library to HttpLink's options`)));\n    }\n\n    multipartInfo = extractFiles(req.body);\n    shouldUseMultipart = !!multipartInfo.files.size;\n  } // `body` for some, `params` for others\n\n\n  let bodyOrParams = {};\n\n  if (isBatching) {\n    if (!shouldUseBody) {\n      return new Observable(observer => observer.error(new Error('Batching is not available for GET requests')));\n    }\n\n    bodyOrParams = {\n      body: req.body\n    };\n  } else {\n    const body = shouldUseMultipart ? multipartInfo.clone : req.body;\n\n    if (shouldUseBody) {\n      bodyOrParams = {\n        body\n      };\n    } else {\n      const params = Object.keys(req.body).reduce((obj, param) => {\n        const value = req.body[param];\n        obj[param] = shouldStringify(param) ? JSON.stringify(value) : value;\n        return obj;\n      }, {});\n      bodyOrParams = {\n        params: params\n      };\n    }\n  }\n\n  if (shouldUseMultipart && shouldUseBody) {\n    const form = new FormData();\n    form.append('operations', JSON.stringify(bodyOrParams.body));\n    const map = {};\n    const files = multipartInfo.files;\n    let i = 0;\n    files.forEach(paths => {\n      map[++i] = paths;\n    });\n    form.append('map', JSON.stringify(map));\n    i = 0;\n    files.forEach((_, file) => {\n      form.append(++i + '', file, file.name);\n    });\n    bodyOrParams.body = form;\n  } // create a request\n\n\n  return httpClient.request(req.method, req.url, {\n    observe: 'response',\n    responseType: 'json',\n    reportProgress: false,\n    ...bodyOrParams,\n    ...req.options\n  });\n};\n\nconst mergeHeaders = (source, destination) => {\n  if (source && destination) {\n    const merged = destination.keys().reduce((headers, name) => headers.set(name, destination.getAll(name)), source);\n    return merged;\n  }\n\n  return destination || source;\n};\n\nfunction prioritize(...values) {\n  const picked = values.find(val => typeof val !== 'undefined');\n\n  if (typeof picked === 'undefined') {\n    return values[values.length - 1];\n  }\n\n  return picked;\n}\n\nfunction createHeadersWithClientAwereness(context) {\n  // `apollographql-client-*` headers are automatically set if a\n  // `clientAwareness` object is found in the context. These headers are\n  // set first, followed by the rest of the headers pulled from\n  // `context.headers`.\n  let headers = context.headers && context.headers instanceof HttpHeaders ? context.headers : new HttpHeaders(context.headers);\n\n  if (context.clientAwareness) {\n    const {\n      name,\n      version\n    } = context.clientAwareness; // If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n\n    if (name && !headers.has('apollographql-client-name')) {\n      headers = headers.set('apollographql-client-name', name);\n    }\n\n    if (version && !headers.has('apollographql-client-version')) {\n      headers = headers.set('apollographql-client-version', version);\n    }\n  }\n\n  return headers;\n} // XXX find a better name for it\n\n\nclass HttpLinkHandler extends ApolloLink {\n  constructor(httpClient, options) {\n    super();\n    this.httpClient = httpClient;\n    this.options = options;\n    this.print = print;\n\n    if (this.options.operationPrinter) {\n      this.print = this.options.operationPrinter;\n    }\n\n    this.requester = operation => new Observable$1(observer => {\n      const context = operation.getContext(); // decides which value to pick, Context, Options or to just use the default\n\n      const pick = (key, init) => {\n        return prioritize(context[key], this.options[key], init);\n      };\n\n      let method = pick('method', 'POST');\n      const includeQuery = pick('includeQuery', true);\n      const includeExtensions = pick('includeExtensions', false);\n      const url = pick('uri', 'graphql');\n      const withCredentials = pick('withCredentials');\n      const useMultipart = pick('useMultipart');\n      const useGETForQueries = this.options.useGETForQueries === true;\n      const isQuery = operation.query.definitions.some(def => def.kind === 'OperationDefinition' && def.operation === 'query');\n\n      if (useGETForQueries && isQuery) {\n        method = 'GET';\n      }\n\n      const req = {\n        method,\n        url: typeof url === 'function' ? url(operation) : url,\n        body: {\n          operationName: operation.operationName,\n          variables: operation.variables\n        },\n        options: {\n          withCredentials,\n          useMultipart,\n          headers: this.options.headers\n        }\n      };\n\n      if (includeExtensions) {\n        req.body.extensions = operation.extensions;\n      }\n\n      if (includeQuery) {\n        req.body.query = this.print(operation.query);\n      }\n\n      const headers = createHeadersWithClientAwereness(context);\n      req.options.headers = mergeHeaders(req.options.headers, headers);\n      const sub = fetch(req, this.httpClient, this.options.extractFiles).subscribe({\n        next: response => {\n          operation.setContext({\n            response\n          });\n          observer.next(response.body);\n        },\n        error: err => observer.error(err),\n        complete: () => observer.complete()\n      });\n      return () => {\n        if (!sub.closed) {\n          sub.unsubscribe();\n        }\n      };\n    });\n  }\n\n  request(op) {\n    return this.requester(op);\n  }\n\n}\n\nclass HttpLink {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n\n  create(options) {\n    return new HttpLinkHandler(this.httpClient, options);\n  }\n\n}\n\nHttpLink.ɵfac = function HttpLink_Factory(t) {\n  return new (t || HttpLink)(i0.ɵɵinject(i1.HttpClient));\n};\n\nHttpLink.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HttpLink,\n  factory: HttpLink.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpLink, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }];\n  }, null);\n})();\n\nconst defaults = {\n  batchInterval: 10,\n  batchMax: 10,\n  uri: 'graphql',\n  method: 'POST'\n};\n\nclass HttpBatchLinkHandler extends ApolloLink {\n  constructor(httpClient, options) {\n    super();\n    this.httpClient = httpClient;\n    this.options = options;\n    this.print = print;\n    this.batchInterval = options.batchInterval || defaults.batchInterval;\n    this.batchMax = options.batchMax || defaults.batchMax;\n\n    if (this.options.operationPrinter) {\n      this.print = this.options.operationPrinter;\n    }\n\n    const batchHandler = operations => {\n      return new Observable$1(observer => {\n        const body = this.createBody(operations);\n        const headers = this.createHeaders(operations);\n        const {\n          method,\n          uri,\n          withCredentials\n        } = this.createOptions(operations);\n\n        if (typeof uri === 'function') {\n          throw new Error(`Option 'uri' is a function, should be a string`);\n        }\n\n        const req = {\n          method,\n          url: uri,\n          body: body,\n          options: {\n            withCredentials,\n            headers\n          }\n        };\n        const sub = fetch(req, this.httpClient, () => {\n          throw new Error('File upload is not available when combined with Batching');\n        }).subscribe({\n          next: result => observer.next(result.body),\n          error: err => observer.error(err),\n          complete: () => observer.complete()\n        });\n        return () => {\n          if (!sub.closed) {\n            sub.unsubscribe();\n          }\n        };\n      });\n    };\n\n    const batchKey = options.batchKey || (operation => {\n      return this.createBatchKey(operation);\n    });\n\n    this.batcher = new BatchLink({\n      batchInterval: this.batchInterval,\n      batchMax: this.batchMax,\n      batchKey,\n      batchHandler\n    });\n  }\n\n  createOptions(operations) {\n    const context = operations[0].getContext();\n    return {\n      method: prioritize(context.method, this.options.method, defaults.method),\n      uri: prioritize(context.uri, this.options.uri, defaults.uri),\n      withCredentials: prioritize(context.withCredentials, this.options.withCredentials)\n    };\n  }\n\n  createBody(operations) {\n    return operations.map(operation => {\n      const includeExtensions = prioritize(operation.getContext().includeExtensions, this.options.includeExtensions, false);\n      const includeQuery = prioritize(operation.getContext().includeQuery, this.options.includeQuery, true);\n      const body = {\n        operationName: operation.operationName,\n        variables: operation.variables\n      };\n\n      if (includeExtensions) {\n        body.extensions = operation.extensions;\n      }\n\n      if (includeQuery) {\n        body.query = this.print(operation.query);\n      }\n\n      return body;\n    });\n  }\n\n  createHeaders(operations) {\n    return operations.reduce((headers, operation) => {\n      return mergeHeaders(headers, operation.getContext().headers);\n    }, createHeadersWithClientAwereness({\n      headers: this.options.headers,\n      clientAwareness: operations[0]?.getContext()?.clientAwareness\n    }));\n  }\n\n  createBatchKey(operation) {\n    const context = operation.getContext();\n\n    if (context.skipBatching) {\n      return Math.random().toString(36).substr(2, 9);\n    }\n\n    const headers = context.headers && context.headers.keys().map(k => context.headers.get(k));\n    const opts = JSON.stringify({\n      includeQuery: context.includeQuery,\n      includeExtensions: context.includeExtensions,\n      headers\n    });\n    return prioritize(context.uri, this.options.uri) + opts;\n  }\n\n  request(op) {\n    return this.batcher.request(op);\n  }\n\n}\n\nclass HttpBatchLink {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n\n  create(options) {\n    return new HttpBatchLinkHandler(this.httpClient, options);\n  }\n\n}\n\nHttpBatchLink.ɵfac = function HttpBatchLink_Factory(t) {\n  return new (t || HttpBatchLink)(i0.ɵɵinject(i1.HttpClient));\n};\n\nHttpBatchLink.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HttpBatchLink,\n  factory: HttpBatchLink.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpBatchLink, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }];\n  }, null);\n})(); // http\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { HttpBatchLink, HttpBatchLinkHandler, HttpLink, HttpLinkHandler };","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql.client/node_modules/apollo-angular/fesm2020/ngApolloLinkHttp.mjs"],"names":["i0","Injectable","ApolloLink","Observable","Observable$1","print","i1","HttpHeaders","BatchLink","fetch","req","httpClient","extractFiles","shouldUseBody","indexOf","method","toUpperCase","shouldStringify","param","toLowerCase","isBatching","body","length","shouldUseMultipart","options","useMultipart","multipartInfo","observer","error","Error","files","size","bodyOrParams","clone","params","Object","keys","reduce","obj","value","JSON","stringify","form","FormData","append","map","i","forEach","paths","_","file","name","request","url","observe","responseType","reportProgress","mergeHeaders","source","destination","merged","headers","set","getAll","prioritize","values","picked","find","val","createHeadersWithClientAwereness","context","clientAwareness","version","has","HttpLinkHandler","constructor","operationPrinter","requester","operation","getContext","pick","key","init","includeQuery","includeExtensions","withCredentials","useGETForQueries","isQuery","query","definitions","some","def","kind","operationName","variables","extensions","sub","subscribe","next","response","setContext","err","complete","closed","unsubscribe","op","HttpLink","create","ɵfac","HttpClient","ɵprov","type","args","providedIn","defaults","batchInterval","batchMax","uri","HttpBatchLinkHandler","batchHandler","operations","createBody","createHeaders","createOptions","result","batchKey","createBatchKey","batcher","skipBatching","Math","random","toString","substr","k","get","opts","HttpBatchLink"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { ApolloLink, Observable as Observable$1 } from '@apollo/client/core';\nimport { print } from 'graphql';\nimport * as i1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BatchLink } from '@apollo/client/link/batch';\n\nconst fetch = (req, httpClient, extractFiles) => {\n    const shouldUseBody = ['POST', 'PUT', 'PATCH'].indexOf(req.method.toUpperCase()) !== -1;\n    const shouldStringify = (param) => ['variables', 'extensions'].indexOf(param.toLowerCase()) !== -1;\n    const isBatching = req.body.length;\n    let shouldUseMultipart = req.options && req.options.useMultipart;\n    let multipartInfo;\n    if (shouldUseMultipart) {\n        if (isBatching) {\n            return new Observable((observer) => observer.error(new Error('File upload is not available when combined with Batching')));\n        }\n        if (!shouldUseBody) {\n            return new Observable((observer) => observer.error(new Error('File upload is not available when GET is used')));\n        }\n        if (!extractFiles) {\n            return new Observable((observer) => observer.error(new Error(`To use File upload you need to pass \"extractFiles\" function from \"extract-files\" library to HttpLink's options`)));\n        }\n        multipartInfo = extractFiles(req.body);\n        shouldUseMultipart = !!multipartInfo.files.size;\n    }\n    // `body` for some, `params` for others\n    let bodyOrParams = {};\n    if (isBatching) {\n        if (!shouldUseBody) {\n            return new Observable((observer) => observer.error(new Error('Batching is not available for GET requests')));\n        }\n        bodyOrParams = {\n            body: req.body,\n        };\n    }\n    else {\n        const body = shouldUseMultipart ? multipartInfo.clone : req.body;\n        if (shouldUseBody) {\n            bodyOrParams = {\n                body,\n            };\n        }\n        else {\n            const params = Object.keys(req.body).reduce((obj, param) => {\n                const value = req.body[param];\n                obj[param] = shouldStringify(param) ? JSON.stringify(value) : value;\n                return obj;\n            }, {});\n            bodyOrParams = { params: params };\n        }\n    }\n    if (shouldUseMultipart && shouldUseBody) {\n        const form = new FormData();\n        form.append('operations', JSON.stringify(bodyOrParams.body));\n        const map = {};\n        const files = multipartInfo.files;\n        let i = 0;\n        files.forEach((paths) => {\n            map[++i] = paths;\n        });\n        form.append('map', JSON.stringify(map));\n        i = 0;\n        files.forEach((_, file) => {\n            form.append(++i + '', file, file.name);\n        });\n        bodyOrParams.body = form;\n    }\n    // create a request\n    return httpClient.request(req.method, req.url, {\n        observe: 'response',\n        responseType: 'json',\n        reportProgress: false,\n        ...bodyOrParams,\n        ...req.options,\n    });\n};\nconst mergeHeaders = (source, destination) => {\n    if (source && destination) {\n        const merged = destination\n            .keys()\n            .reduce((headers, name) => headers.set(name, destination.getAll(name)), source);\n        return merged;\n    }\n    return destination || source;\n};\nfunction prioritize(...values) {\n    const picked = values.find((val) => typeof val !== 'undefined');\n    if (typeof picked === 'undefined') {\n        return values[values.length - 1];\n    }\n    return picked;\n}\nfunction createHeadersWithClientAwereness(context) {\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`.\n    let headers = context.headers && context.headers instanceof HttpHeaders\n        ? context.headers\n        : new HttpHeaders(context.headers);\n    if (context.clientAwareness) {\n        const { name, version } = context.clientAwareness;\n        // If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        if (name && !headers.has('apollographql-client-name')) {\n            headers = headers.set('apollographql-client-name', name);\n        }\n        if (version && !headers.has('apollographql-client-version')) {\n            headers = headers.set('apollographql-client-version', version);\n        }\n    }\n    return headers;\n}\n\n// XXX find a better name for it\nclass HttpLinkHandler extends ApolloLink {\n    constructor(httpClient, options) {\n        super();\n        this.httpClient = httpClient;\n        this.options = options;\n        this.print = print;\n        if (this.options.operationPrinter) {\n            this.print = this.options.operationPrinter;\n        }\n        this.requester = (operation) => new Observable$1((observer) => {\n            const context = operation.getContext();\n            // decides which value to pick, Context, Options or to just use the default\n            const pick = (key, init) => {\n                return prioritize(context[key], this.options[key], init);\n            };\n            let method = pick('method', 'POST');\n            const includeQuery = pick('includeQuery', true);\n            const includeExtensions = pick('includeExtensions', false);\n            const url = pick('uri', 'graphql');\n            const withCredentials = pick('withCredentials');\n            const useMultipart = pick('useMultipart');\n            const useGETForQueries = this.options.useGETForQueries === true;\n            const isQuery = operation.query.definitions.some((def) => def.kind === 'OperationDefinition' && def.operation === 'query');\n            if (useGETForQueries && isQuery) {\n                method = 'GET';\n            }\n            const req = {\n                method,\n                url: typeof url === 'function' ? url(operation) : url,\n                body: {\n                    operationName: operation.operationName,\n                    variables: operation.variables,\n                },\n                options: {\n                    withCredentials,\n                    useMultipart,\n                    headers: this.options.headers,\n                },\n            };\n            if (includeExtensions) {\n                req.body.extensions = operation.extensions;\n            }\n            if (includeQuery) {\n                req.body.query = this.print(operation.query);\n            }\n            const headers = createHeadersWithClientAwereness(context);\n            req.options.headers = mergeHeaders(req.options.headers, headers);\n            const sub = fetch(req, this.httpClient, this.options.extractFiles).subscribe({\n                next: (response) => {\n                    operation.setContext({ response });\n                    observer.next(response.body);\n                },\n                error: (err) => observer.error(err),\n                complete: () => observer.complete(),\n            });\n            return () => {\n                if (!sub.closed) {\n                    sub.unsubscribe();\n                }\n            };\n        });\n    }\n    request(op) {\n        return this.requester(op);\n    }\n}\nclass HttpLink {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n    create(options) {\n        return new HttpLinkHandler(this.httpClient, options);\n    }\n}\nHttpLink.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: HttpLink, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpLink.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: HttpLink, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: HttpLink, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\nconst defaults = {\n    batchInterval: 10,\n    batchMax: 10,\n    uri: 'graphql',\n    method: 'POST',\n};\nclass HttpBatchLinkHandler extends ApolloLink {\n    constructor(httpClient, options) {\n        super();\n        this.httpClient = httpClient;\n        this.options = options;\n        this.print = print;\n        this.batchInterval = options.batchInterval || defaults.batchInterval;\n        this.batchMax = options.batchMax || defaults.batchMax;\n        if (this.options.operationPrinter) {\n            this.print = this.options.operationPrinter;\n        }\n        const batchHandler = (operations) => {\n            return new Observable$1((observer) => {\n                const body = this.createBody(operations);\n                const headers = this.createHeaders(operations);\n                const { method, uri, withCredentials } = this.createOptions(operations);\n                if (typeof uri === 'function') {\n                    throw new Error(`Option 'uri' is a function, should be a string`);\n                }\n                const req = {\n                    method,\n                    url: uri,\n                    body: body,\n                    options: {\n                        withCredentials,\n                        headers,\n                    },\n                };\n                const sub = fetch(req, this.httpClient, () => {\n                    throw new Error('File upload is not available when combined with Batching');\n                }).subscribe({\n                    next: (result) => observer.next(result.body),\n                    error: (err) => observer.error(err),\n                    complete: () => observer.complete(),\n                });\n                return () => {\n                    if (!sub.closed) {\n                        sub.unsubscribe();\n                    }\n                };\n            });\n        };\n        const batchKey = options.batchKey ||\n            ((operation) => {\n                return this.createBatchKey(operation);\n            });\n        this.batcher = new BatchLink({\n            batchInterval: this.batchInterval,\n            batchMax: this.batchMax,\n            batchKey,\n            batchHandler,\n        });\n    }\n    createOptions(operations) {\n        const context = operations[0].getContext();\n        return {\n            method: prioritize(context.method, this.options.method, defaults.method),\n            uri: prioritize(context.uri, this.options.uri, defaults.uri),\n            withCredentials: prioritize(context.withCredentials, this.options.withCredentials),\n        };\n    }\n    createBody(operations) {\n        return operations.map((operation) => {\n            const includeExtensions = prioritize(operation.getContext().includeExtensions, this.options.includeExtensions, false);\n            const includeQuery = prioritize(operation.getContext().includeQuery, this.options.includeQuery, true);\n            const body = {\n                operationName: operation.operationName,\n                variables: operation.variables,\n            };\n            if (includeExtensions) {\n                body.extensions = operation.extensions;\n            }\n            if (includeQuery) {\n                body.query = this.print(operation.query);\n            }\n            return body;\n        });\n    }\n    createHeaders(operations) {\n        return operations.reduce((headers, operation) => {\n            return mergeHeaders(headers, operation.getContext().headers);\n        }, createHeadersWithClientAwereness({\n            headers: this.options.headers,\n            clientAwareness: operations[0]?.getContext()?.clientAwareness,\n        }));\n    }\n    createBatchKey(operation) {\n        const context = operation.getContext();\n        if (context.skipBatching) {\n            return Math.random().toString(36).substr(2, 9);\n        }\n        const headers = context.headers &&\n            context.headers.keys().map((k) => context.headers.get(k));\n        const opts = JSON.stringify({\n            includeQuery: context.includeQuery,\n            includeExtensions: context.includeExtensions,\n            headers,\n        });\n        return prioritize(context.uri, this.options.uri) + opts;\n    }\n    request(op) {\n        return this.batcher.request(op);\n    }\n}\nclass HttpBatchLink {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n    create(options) {\n        return new HttpBatchLinkHandler(this.httpClient, options);\n    }\n}\nHttpBatchLink.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: HttpBatchLink, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\nHttpBatchLink.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: HttpBatchLink, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: HttpBatchLink, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\n\n// http\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HttpBatchLink, HttpBatchLinkHandler, HttpLink, HttpLinkHandler };\n"]},"metadata":{},"sourceType":"module"}