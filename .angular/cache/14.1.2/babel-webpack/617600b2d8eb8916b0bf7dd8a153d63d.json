{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\nvar specifierInfoCache = Object.create(null);\n\nfunction lookupSpecifierInfo(spec) {\n  var cacheKey = JSON.stringify(spec);\n  return specifierInfoCache[cacheKey] || (specifierInfoCache[cacheKey] = Object.create(null));\n}\n\nexport function keyFieldsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n    var extract = function (from, key) {\n      return context.readField(key, from);\n    };\n\n    var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n      var extracted = extractKeyPath(context.storeObject, schemaKeyPath, extract);\n\n      if (extracted === void 0 && object !== context.storeObject && hasOwn.call(object, schemaKeyPath[0])) {\n        extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n      }\n\n      __DEV__ ? invariant(extracted !== void 0, \"Missing field '\".concat(schemaKeyPath.join('.'), \"' while extracting keyFields from \").concat(JSON.stringify(object))) : invariant(extracted !== void 0, 2);\n      return extracted;\n    });\n    return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n  });\n}\nexport function keyArgsFnFromSpecifier(specifier) {\n  var info = lookupSpecifierInfo(specifier);\n  return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {\n    var field = _a.field,\n        variables = _a.variables,\n        fieldName = _a.fieldName;\n    var collected = collectSpecifierPaths(specifier, function (keyPath) {\n      var firstKey = keyPath[0];\n      var firstChar = firstKey.charAt(0);\n\n      if (firstChar === \"@\") {\n        if (field && isNonEmptyArray(field.directives)) {\n          var directiveName_1 = firstKey.slice(1);\n          var d = field.directives.find(function (d) {\n            return d.name.value === directiveName_1;\n          });\n          var directiveArgs = d && argumentsObjectFromField(d, variables);\n          return directiveArgs && extractKeyPath(directiveArgs, keyPath.slice(1));\n        }\n\n        return;\n      }\n\n      if (firstChar === \"$\") {\n        var variableName = firstKey.slice(1);\n\n        if (variables && hasOwn.call(variables, variableName)) {\n          var varKeyPath = keyPath.slice(0);\n          varKeyPath[0] = variableName;\n          return extractKeyPath(variables, varKeyPath);\n        }\n\n        return;\n      }\n\n      if (args) {\n        return extractKeyPath(args, keyPath);\n      }\n    });\n    var suffix = JSON.stringify(collected);\n\n    if (args || suffix !== \"{}\") {\n      fieldName += \":\" + suffix;\n    }\n\n    return fieldName;\n  });\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n  var merger = new DeepMerger();\n  return getSpecifierPaths(specifier).reduce(function (collected, path) {\n    var _a;\n\n    var toMerge = extractor(path);\n\n    if (toMerge !== void 0) {\n      for (var i = path.length - 1; i >= 0; --i) {\n        toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n      }\n\n      collected = merger.merge(collected, toMerge);\n    }\n\n    return collected;\n  }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n  var info = lookupSpecifierInfo(spec);\n\n  if (!info.paths) {\n    var paths_1 = info.paths = [];\n    var currentPath_1 = [];\n    spec.forEach(function (s, i) {\n      if (isArray(s)) {\n        getSpecifierPaths(s).forEach(function (p) {\n          return paths_1.push(currentPath_1.concat(p));\n        });\n        currentPath_1.length = 0;\n      } else {\n        currentPath_1.push(s);\n\n        if (!isArray(spec[i + 1])) {\n          paths_1.push(currentPath_1.slice(0));\n          currentPath_1.length = 0;\n        }\n      }\n    });\n  }\n\n  return info.paths;\n}\n\nfunction extractKey(object, key) {\n  return object[key];\n}\n\nexport function extractKeyPath(object, path, extract) {\n  extract = extract || extractKey;\n  return normalize(path.reduce(function reducer(obj, key) {\n    return isArray(obj) ? obj.map(function (child) {\n      return reducer(child, key);\n    }) : obj && extract(obj, key);\n  }, object));\n}\n\nfunction normalize(value) {\n  if (isNonNullObject(value)) {\n    if (isArray(value)) {\n      return value.map(normalize);\n    }\n\n    return collectSpecifierPaths(Object.keys(value).sort(), function (path) {\n      return extractKeyPath(value, path);\n    });\n  }\n\n  return value;\n}","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql.client/node_modules/@apollo/client/cache/inmemory/key-extractor.js"],"names":["invariant","argumentsObjectFromField","DeepMerger","isNonEmptyArray","isNonNullObject","hasOwn","isArray","specifierInfoCache","Object","create","lookupSpecifierInfo","spec","cacheKey","JSON","stringify","keyFieldsFnFromSpecifier","specifier","info","keyFieldsFn","object","context","extract","from","key","readField","keyObject","collectSpecifierPaths","schemaKeyPath","extracted","extractKeyPath","storeObject","call","extractKey","__DEV__","concat","join","typename","keyArgsFnFromSpecifier","keyArgsFn","args","_a","field","variables","fieldName","collected","keyPath","firstKey","firstChar","charAt","directives","directiveName_1","slice","d","find","name","value","directiveArgs","variableName","varKeyPath","suffix","extractor","merger","getSpecifierPaths","reduce","path","toMerge","i","length","merge","paths","paths_1","currentPath_1","forEach","s","p","push","normalize","reducer","obj","map","child","keys","sort"],"mappings":"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","sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport { argumentsObjectFromField, DeepMerger, isNonEmptyArray, isNonNullObject, } from \"../../utilities/index.js\";\nimport { hasOwn, isArray } from \"./helpers.js\";\nvar specifierInfoCache = Object.create(null);\nfunction lookupSpecifierInfo(spec) {\n    var cacheKey = JSON.stringify(spec);\n    return specifierInfoCache[cacheKey] ||\n        (specifierInfoCache[cacheKey] = Object.create(null));\n}\nexport function keyFieldsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {\n        var extract = function (from, key) { return context.readField(key, from); };\n        var keyObject = context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {\n            var extracted = extractKeyPath(context.storeObject, schemaKeyPath, extract);\n            if (extracted === void 0 &&\n                object !== context.storeObject &&\n                hasOwn.call(object, schemaKeyPath[0])) {\n                extracted = extractKeyPath(object, schemaKeyPath, extractKey);\n            }\n            __DEV__ ? invariant(extracted !== void 0, \"Missing field '\".concat(schemaKeyPath.join('.'), \"' while extracting keyFields from \").concat(JSON.stringify(object))) : invariant(extracted !== void 0, 2);\n            return extracted;\n        });\n        return \"\".concat(context.typename, \":\").concat(JSON.stringify(keyObject));\n    });\n}\nexport function keyArgsFnFromSpecifier(specifier) {\n    var info = lookupSpecifierInfo(specifier);\n    return info.keyArgsFn || (info.keyArgsFn = function (args, _a) {\n        var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;\n        var collected = collectSpecifierPaths(specifier, function (keyPath) {\n            var firstKey = keyPath[0];\n            var firstChar = firstKey.charAt(0);\n            if (firstChar === \"@\") {\n                if (field && isNonEmptyArray(field.directives)) {\n                    var directiveName_1 = firstKey.slice(1);\n                    var d = field.directives.find(function (d) { return d.name.value === directiveName_1; });\n                    var directiveArgs = d && argumentsObjectFromField(d, variables);\n                    return directiveArgs && extractKeyPath(directiveArgs, keyPath.slice(1));\n                }\n                return;\n            }\n            if (firstChar === \"$\") {\n                var variableName = firstKey.slice(1);\n                if (variables && hasOwn.call(variables, variableName)) {\n                    var varKeyPath = keyPath.slice(0);\n                    varKeyPath[0] = variableName;\n                    return extractKeyPath(variables, varKeyPath);\n                }\n                return;\n            }\n            if (args) {\n                return extractKeyPath(args, keyPath);\n            }\n        });\n        var suffix = JSON.stringify(collected);\n        if (args || suffix !== \"{}\") {\n            fieldName += \":\" + suffix;\n        }\n        return fieldName;\n    });\n}\nexport function collectSpecifierPaths(specifier, extractor) {\n    var merger = new DeepMerger;\n    return getSpecifierPaths(specifier).reduce(function (collected, path) {\n        var _a;\n        var toMerge = extractor(path);\n        if (toMerge !== void 0) {\n            for (var i = path.length - 1; i >= 0; --i) {\n                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);\n            }\n            collected = merger.merge(collected, toMerge);\n        }\n        return collected;\n    }, Object.create(null));\n}\nexport function getSpecifierPaths(spec) {\n    var info = lookupSpecifierInfo(spec);\n    if (!info.paths) {\n        var paths_1 = info.paths = [];\n        var currentPath_1 = [];\n        spec.forEach(function (s, i) {\n            if (isArray(s)) {\n                getSpecifierPaths(s).forEach(function (p) { return paths_1.push(currentPath_1.concat(p)); });\n                currentPath_1.length = 0;\n            }\n            else {\n                currentPath_1.push(s);\n                if (!isArray(spec[i + 1])) {\n                    paths_1.push(currentPath_1.slice(0));\n                    currentPath_1.length = 0;\n                }\n            }\n        });\n    }\n    return info.paths;\n}\nfunction extractKey(object, key) {\n    return object[key];\n}\nexport function extractKeyPath(object, path, extract) {\n    extract = extract || extractKey;\n    return normalize(path.reduce(function reducer(obj, key) {\n        return isArray(obj)\n            ? obj.map(function (child) { return reducer(child, key); })\n            : obj && extract(obj, key);\n    }, object));\n}\nfunction normalize(value) {\n    if (isNonNullObject(value)) {\n        if (isArray(value)) {\n            return value.map(normalize);\n        }\n        return collectSpecifierPaths(Object.keys(value).sort(), function (path) { return extractKeyPath(value, path); });\n    }\n    return value;\n}\n"]},"metadata":{},"sourceType":"module"}