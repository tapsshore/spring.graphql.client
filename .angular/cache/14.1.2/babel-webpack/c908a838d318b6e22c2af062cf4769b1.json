{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\n\nvar delModifier = function () {\n  return DELETE;\n};\n\nvar INVALIDATE = Object.create(null);\n\nvar EntityStore = function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n\n    this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n      if (typeof objOrIdOrRef === \"string\") {\n        return makeReference(objOrIdOrRef);\n      }\n\n      if (isReference(objOrIdOrRef)) {\n        return objOrIdOrRef;\n      }\n\n      var id = _this.policies.identify(objOrIdOrRef)[0];\n\n      if (id) {\n        var ref = makeReference(id);\n\n        if (mergeIntoStore) {\n          _this.merge(id, objOrIdOrRef);\n        }\n\n        return ref;\n      }\n    };\n  }\n\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  };\n\n  EntityStore.prototype.merge = function (older, newer) {\n    var _this = this;\n\n    var dataId;\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n    var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n    var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n    if (!incoming) return;\n    __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            fieldsToDirty_1[storeFieldName] = 1;\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n\n            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty_1[fieldName] = 1;\n            }\n\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty_1.__typename;\n        }\n\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n      var sharedDetails_1 = {\n        DELETE: DELETE,\n        INVALIDATE: INVALIDATE,\n        isReference: isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: function (fieldNameOrOptions, from) {\n          return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId)\n          } : fieldNameOrOptions, {\n            store: _this\n          });\n        }\n      };\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), {\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            storage: _this.getStorage(dataId, storeFieldName)\n          }));\n\n          if (newValue === INVALIDATE) {\n            _this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n\n            if (newValue !== fieldValue) {\n              changedFields_1[storeFieldName] = newValue;\n              needToMerge_1 = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.evict = function (options, limit) {\n    var evicted = false;\n\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n\n    return evicted;\n  };\n\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n\n  EntityStore.prototype.extract = function () {\n    var _this = this;\n\n    var obj = this.toObject();\n    var extraRootIds = [];\n    this.getRootIdSet().forEach(function (id) {\n      if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n\n    if (extraRootIds.length) {\n      obj.__META = {\n        extraRootIds: extraRootIds.sort()\n      };\n    }\n\n    return obj;\n  };\n\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n\n    if (newData) {\n      var __META = newData.__META,\n          rest_1 = __rest(newData, [\"__META\"]);\n\n      Object.keys(rest_1).forEach(function (dataId) {\n        _this.merge(dataId, rest_1[dataId]);\n      });\n\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  };\n\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n\n    return 0;\n  };\n\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n\n    return ids;\n  };\n\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n\n    if (idsToRemove.length) {\n      var root_1 = this;\n\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n\n    return idsToRemove;\n  };\n\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var root = this.data[dataId];\n      if (!root) return found_1;\n      var workSet_1 = new Set([root]);\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        }\n\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(function (key) {\n            var child = obj[key];\n\n            if (isNonNullObject(child)) {\n              workSet_1.add(child);\n            }\n          });\n        }\n      });\n    }\n\n    return this.refs[dataId];\n  };\n\n  EntityStore.prototype.makeCacheKey = function () {\n    return this.group.keyMaker.lookupArray(arguments);\n  };\n\n  return EntityStore;\n}();\n\nexport { EntityStore };\n\nvar CacheGroup = function () {\n  function CacheGroup(caching, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    this.caching = caching;\n    this.parent = parent;\n    this.d = null;\n    this.resetCaching();\n  }\n\n  CacheGroup.prototype.resetCaching = function () {\n    this.d = this.caching ? dep() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  };\n\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      var fieldName = fieldNameFromStoreName(storeFieldName);\n\n      if (fieldName !== storeFieldName) {\n        this.d(makeDepKey(dataId, fieldName));\n      }\n\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  };\n\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n    }\n  };\n\n  return CacheGroup;\n}();\n\nfunction makeDepKey(dataId, storeFieldName) {\n  return storeFieldName + '#' + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n  if (supportsResultCaching(store)) {\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n\n    function Root(_a) {\n      var policies = _a.policies,\n          _b = _a.resultCaching,\n          resultCaching = _b === void 0 ? true : _b,\n          seed = _a.seed;\n\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n\n      _this.stump = new Stump(_this);\n      _this.storageTrie = new Trie(canUseWeakMap);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n\n    Root.prototype.addLayer = function (layerId, replay) {\n      return this.stump.addLayer(layerId, replay);\n    };\n\n    Root.prototype.removeLayer = function () {\n      return this;\n    };\n\n    Root.prototype.getStorage = function () {\n      return this.storageTrie.lookupArray(arguments);\n    };\n\n    return Root;\n  }(EntityStore);\n\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n\n    var parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          var ownStoreObject = _this.data[dataId];\n          var parentStoreObject = parent[\"lookup\"](dataId);\n\n          if (!parentStoreObject) {\n            _this.delete(dataId);\n          } else if (!ownStoreObject) {\n            _this.group.dirty(dataId, \"__exists\");\n\n            Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n              _this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n              if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                _this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n\n  Layer.prototype.getStorage = function () {\n    var p = this.parent;\n\n    while (p.parent) p = p.parent;\n\n    return p.getStorage.apply(p, arguments);\n  };\n\n  return Layer;\n}(EntityStore);\n\nvar Stump = function (_super) {\n  __extends(Stump, _super);\n\n  function Stump(root) {\n    return _super.call(this, \"EntityStore.Stump\", root, function () {}, new CacheGroup(root.group.caching, root.group)) || this;\n  }\n\n  Stump.prototype.removeLayer = function () {\n    return this;\n  };\n\n  Stump.prototype.merge = function () {\n    return this.parent.merge.apply(this.parent, arguments);\n  };\n\n  return Stump;\n}(Layer);\n\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql/spring.graphql.client/node_modules/@apollo/client/cache/inmemory/entityStore.js"],"names":["__assign","__extends","__rest","invariant","dep","equal","Trie","isReference","makeReference","DeepMerger","maybeDeepFreeze","canUseWeakMap","isNonNullObject","hasOwn","fieldNameFromStoreName","DELETE","Object","create","delModifier","INVALIDATE","EntityStore","policies","group","_this","data","rootIds","refs","getFieldValue","objectOrReference","storeFieldName","get","__ref","canRead","objOrRef","has","toReference","objOrIdOrRef","mergeIntoStore","id","identify","ref","merge","prototype","toObject","dataId","lookup","fieldName","depend","call","storeObject","rootTypenamesById","Layer","parent","dependOnExistence","older","newer","existing","incoming","__DEV__","merged","storeObjectReconciler","caching","fieldsToDirty_1","__exists","keys","forEach","hasKeyArgs","__typename","dirty","modify","fields","changedFields_1","needToMerge_1","allDeleted_1","sharedDetails_1","readField","fieldNameOrOptions","from","store","fieldValue","newValue","storage","getStorage","delete","args","_a","typename","getStoreFieldName","evict","options","limit","evicted","clear","replace","extract","obj","extraRootIds","getRootIdSet","push","length","__META","sort","newData","rest_1","retain","rootId","release","count","ids","Set","add","gc","snapshot","findChildRefIds","idsToRemove","root_1","found_1","root","workSet_1","key","child","makeCacheKey","keyMaker","lookupArray","arguments","CacheGroup","d","resetCaching","makeDepKey","maybeDependOnExistenceOfEntity","entityId","supportsResultCaching","Root","_super","_b","resultCaching","seed","stump","Stump","storageTrie","addLayer","layerId","replay","removeLayer","ownStoreObject","parentStoreObject","fromParent","p","apply","existingObject","incomingObject","property","existingValue","incomingValue"],"mappings":"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","sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject, } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\nvar delModifier = function () { return DELETE; };\nvar INVALIDATE = Object.create(null);\nvar EntityStore = (function () {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        this.rootIds = Object.create(null);\n        this.refs = Object.create(null);\n        this.getFieldValue = function (objectOrReference, storeFieldName) { return maybeDeepFreeze(isReference(objectOrReference)\n            ? _this.get(objectOrReference.__ref, storeFieldName)\n            : objectOrReference && objectOrReference[storeFieldName]); };\n        this.canRead = function (objOrRef) {\n            return isReference(objOrRef)\n                ? _this.has(objOrRef.__ref)\n                : typeof objOrRef === \"object\";\n        };\n        this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return makeReference(objOrIdOrRef);\n            }\n            if (isReference(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = makeReference(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    EntityStore.prototype.toObject = function () {\n        return __assign({}, this.data);\n    };\n    EntityStore.prototype.has = function (dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function (dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" &&\n            hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n        if (dependOnExistence)\n            this.group.depend(dataId, \"__exists\");\n        if (hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function (older, newer) {\n        var _this = this;\n        var dataId;\n        if (isReference(older))\n            older = older.__ref;\n        if (isReference(newer))\n            newer = newer.__ref;\n        var existing = typeof older === \"string\"\n            ? this.lookup(dataId = older)\n            : older;\n        var incoming = typeof newer === \"string\"\n            ? this.lookup(dataId = newer)\n            : newer;\n        if (!incoming)\n            return;\n        __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n        var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                if (!existing)\n                    fieldsToDirty_1.__exists = 1;\n                Object.keys(incoming).forEach(function (storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        var fieldName = fieldNameFromStoreName(storeFieldName);\n                        if (fieldName !== storeFieldName &&\n                            !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename &&\n                    !(existing && existing.__typename) &&\n                    this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function (fieldName) { return _this.group.dirty(dataId, fieldName); });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function (dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function (fieldNameOrOptions, from) { return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                    fieldName: fieldNameOrOptions,\n                    from: from || makeReference(dataId),\n                } : fieldNameOrOptions, { store: _this }); },\n            };\n            Object.keys(storeObject).forEach(function (storeFieldName) {\n                var fieldName = fieldNameFromStoreName(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0)\n                    return;\n                var modify = typeof fields === \"function\"\n                    ? fields\n                    : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE :\n                        modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), { fieldName: fieldName, storeFieldName: storeFieldName, storage: _this.getStorage(dataId, storeFieldName) }));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    }\n                    else {\n                        if (newValue === DELETE)\n                            newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    }\n                    else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    EntityStore.prototype.delete = function (dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args\n                ? this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })\n                : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {},\n                _a[storeFieldName] = delModifier,\n                _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function (options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function () {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function () {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function (id) {\n            if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = { extraRootIds: extraRootIds.sort() };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function (newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function (dataId) {\n            if (!(newData && hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = __rest(newData, [\"__META\"]);\n            Object.keys(rest_1).forEach(function (dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function (rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function (rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count)\n                delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    EntityStore.prototype.getRootIdSet = function (ids) {\n        if (ids === void 0) { ids = new Set(); }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        }\n        else {\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    EntityStore.prototype.gc = function () {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function (id) {\n            if (hasOwn.call(snapshot, id)) {\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while (root_1 instanceof Layer)\n                root_1 = root_1.parent;\n            idsToRemove.forEach(function (id) { return root_1.delete(id); });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function (dataId) {\n        if (!hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var root = this.data[dataId];\n            if (!root)\n                return found_1;\n            var workSet_1 = new Set([root]);\n            workSet_1.forEach(function (obj) {\n                if (isReference(obj)) {\n                    found_1[obj.__ref] = true;\n                }\n                if (isNonNullObject(obj)) {\n                    Object.keys(obj).forEach(function (key) {\n                        var child = obj[key];\n                        if (isNonNullObject(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function () {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}());\nexport { EntityStore };\nvar CacheGroup = (function () {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) { parent = null; }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function () {\n        this.d = this.caching ? dep() : null;\n        this.keyMaker = new Trie(canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}());\nfunction makeDepKey(dataId, storeFieldName) {\n    return storeFieldName + '#' + dataId;\n}\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function (EntityStore) {\n    var Root = (function (_super) {\n        __extends(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new Trie(canUseWeakMap);\n            if (seed)\n                _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function (layerId, replay) {\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function () {\n            return this;\n        };\n        Root.prototype.getStorage = function () {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore));\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function (layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function (layerId) {\n        var _this = this;\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                Object.keys(this.data).forEach(function (dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        _this.delete(dataId);\n                    }\n                    else if (!ownStoreObject) {\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    }\n                    else if (ownStoreObject !== parentStoreObject) {\n                        Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n                            if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        if (parent === this.parent)\n            return this;\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function () {\n        return __assign(__assign({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function (dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function () {\n        var p = this.parent;\n        while (p.parent)\n            p = p.parent;\n        return p.getStorage.apply(p, arguments);\n    };\n    return Layer;\n}(EntityStore));\nvar Stump = (function (_super) {\n    __extends(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function () { }, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function () {\n        return this;\n    };\n    Stump.prototype.merge = function () {\n        return this.parent.merge.apply(this.parent, arguments);\n    };\n    return Stump;\n}(Layer));\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n    return !!(store instanceof EntityStore && store.group.caching);\n}\n"]},"metadata":{},"sourceType":"module"}