{"ast":null,"code":"import { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nexport function rewriteURIForGET(chosenURI, body) {\n  var queryParams = [];\n\n  var addQueryParam = function (key, value) {\n    queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n\n  if (body.variables) {\n    var serializedVariables = void 0;\n\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('variables', serializedVariables);\n  }\n\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  var fragment = '',\n      preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql/spring.graphql.client/node_modules/@apollo/client/link/http/rewriteURIForGET.js"],"names":["serializeFetchParameter","rewriteURIForGET","chosenURI","body","queryParams","addQueryParam","key","value","push","concat","encodeURIComponent","query","operationName","variables","serializedVariables","parseError","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","newURI","join"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,8BAAxC;AACA,OAAO,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,IAArC,EAA2C;AAC9C,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAIC,aAAa,GAAG,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AACtCH,IAAAA,WAAW,CAACI,IAAZ,CAAiB,GAAGC,MAAH,CAAUH,GAAV,EAAe,GAAf,EAAoBG,MAApB,CAA2BC,kBAAkB,CAACH,KAAD,CAA7C,CAAjB;AACH,GAFD;;AAGA,MAAI,WAAWJ,IAAf,EAAqB;AACjBE,IAAAA,aAAa,CAAC,OAAD,EAAUF,IAAI,CAACQ,KAAf,CAAb;AACH;;AACD,MAAIR,IAAI,CAACS,aAAT,EAAwB;AACpBP,IAAAA,aAAa,CAAC,eAAD,EAAkBF,IAAI,CAACS,aAAvB,CAAb;AACH;;AACD,MAAIT,IAAI,CAACU,SAAT,EAAoB;AAChB,QAAIC,mBAAmB,GAAG,KAAK,CAA/B;;AACA,QAAI;AACAA,MAAAA,mBAAmB,GAAGd,uBAAuB,CAACG,IAAI,CAACU,SAAN,EAAiB,eAAjB,CAA7C;AACH,KAFD,CAGA,OAAOE,UAAP,EAAmB;AACf,aAAO;AAAEA,QAAAA,UAAU,EAAEA;AAAd,OAAP;AACH;;AACDV,IAAAA,aAAa,CAAC,WAAD,EAAcS,mBAAd,CAAb;AACH;;AACD,MAAIX,IAAI,CAACa,UAAT,EAAqB;AACjB,QAAIC,oBAAoB,GAAG,KAAK,CAAhC;;AACA,QAAI;AACAA,MAAAA,oBAAoB,GAAGjB,uBAAuB,CAACG,IAAI,CAACa,UAAN,EAAkB,gBAAlB,CAA9C;AACH,KAFD,CAGA,OAAOD,UAAP,EAAmB;AACf,aAAO;AAAEA,QAAAA,UAAU,EAAEA;AAAd,OAAP;AACH;;AACDV,IAAAA,aAAa,CAAC,YAAD,EAAeY,oBAAf,CAAb;AACH;;AACD,MAAIC,QAAQ,GAAG,EAAf;AAAA,MAAmBC,WAAW,GAAGjB,SAAjC;AACA,MAAIkB,aAAa,GAAGlB,SAAS,CAACmB,OAAV,CAAkB,GAAlB,CAApB;;AACA,MAAID,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACtBF,IAAAA,QAAQ,GAAGhB,SAAS,CAACoB,MAAV,CAAiBF,aAAjB,CAAX;AACAD,IAAAA,WAAW,GAAGjB,SAAS,CAACoB,MAAV,CAAiB,CAAjB,EAAoBF,aAApB,CAAd;AACH;;AACD,MAAIG,iBAAiB,GAAGJ,WAAW,CAACE,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAA9B,GAAkC,GAAlC,GAAwC,GAAhE;AACA,MAAIG,MAAM,GAAGL,WAAW,GAAGI,iBAAd,GAAkCnB,WAAW,CAACqB,IAAZ,CAAiB,GAAjB,CAAlC,GAA0DP,QAAvE;AACA,SAAO;AAAEM,IAAAA,MAAM,EAAEA;AAAV,GAAP;AACH","sourcesContent":["import { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nexport function rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\n"]},"metadata":{},"sourceType":"module"}