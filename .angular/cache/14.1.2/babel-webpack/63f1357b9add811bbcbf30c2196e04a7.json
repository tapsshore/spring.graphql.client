{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK } from 'graphql';\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\n\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n        client = _a.client,\n        resolvers = _a.resolvers,\n        fragmentMatcher = _a.fragmentMatcher;\n    this.cache = cache;\n\n    if (client) {\n      this.client = client;\n    }\n\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n\n    this.resolvers = this.resolvers || {};\n\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n        remoteResult = _a.remoteResult,\n        context = _a.context,\n        variables = _a.variables,\n        _b = _a.onlyRunForcedResolvers,\n        onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n\n        return [2, remoteResult];\n      });\n    });\n  };\n\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n\n    return null;\n  };\n\n  LocalState.prototype.serverQuery = function (document) {\n    return removeClientSetsFromDocument(document);\n  };\n\n  LocalState.prototype.prepareContext = function (context) {\n    var cache = this.cache;\n    return __assign(__assign({}, context), {\n      cache: cache,\n      getCacheKey: function (obj) {\n        return cache.identify(obj);\n      }\n    });\n  };\n\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (context === void 0) {\n      context = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n            });\n\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    if (variables === void 0) {\n      variables = {};\n    }\n\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function () {\n        return true;\n      };\n    }\n\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : 'Query';\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n\n                  if (typeof fieldResult !== 'undefined') {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                __DEV__ ? invariant(fragment, \"No fragment named \".concat(selection.name.value)) : invariant(fragment, 9);\n              }\n\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n\n              return [2];\n            });\n          });\n        };\n\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n\n            if (resolve) {\n              resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }]));\n            }\n          }\n        }\n\n        return [2, resultPromise.then(function (result) {\n          if (result === void 0) {\n            result = defaultResult;\n          }\n\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === 'export' && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n\n          if (!field.selectionSet) {\n            return result;\n          }\n\n          if (result == null) {\n            return result;\n          }\n\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, result, execContext);\n          }\n\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n\n  LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n    var _this = this;\n\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, item, execContext);\n      }\n\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n      }\n    }));\n  };\n\n  return LocalState;\n}();\n\nexport { LocalState };","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql.client/node_modules/@apollo/client/core/LocalState.js"],"names":["__assign","__awaiter","__generator","invariant","visit","BREAK","argumentsObjectFromField","buildQueryFromSelectionSet","createFragmentMap","getFragmentDefinitions","getMainDefinition","hasDirectives","isField","isInlineFragment","mergeDeep","mergeDeepArray","removeClientSetsFromDocument","resultKeyNameFromField","shouldInclude","cacheSlot","LocalState","_a","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","prototype","_this","Array","isArray","forEach","resolverGroup","setResolvers","getResolvers","runResolvers","document","remoteResult","context","variables","_b","onlyRunForcedResolvers","_c","resolveDocument","data","then","localResult","result","getFragmentMatcher","clientQuery","serverQuery","prepareContext","getCacheKey","obj","identify","addExportedVariables","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","Directive","enter","node","name","value","arguments","some","arg","kind","diff","query","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","defaultOperationType","execContext","operation","charAt","toUpperCase","slice","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","fragment","typeCondition","resolveField","fieldResult","push","__DEV__","concat","fragmentResult","Promise","all","selections","map","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","resolve","__typename","withValue","directives","directive","resolveSubSelectedArray","item"],"mappings":"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","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK, } from 'graphql';\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude, } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return removeClientSetsFromDocument(document);\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        var cache = this.cache;\n        return __assign(__assign({}, context), { cache: cache, getCacheKey: function (obj) {\n                return cache.identify(obj);\n            } });\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? definitionOperation.charAt(0).toUpperCase() +\n                        definitionOperation.slice(1)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign(__assign({}, context), { cache: cache, client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            __DEV__ ? invariant(fragment, \"No fragment named \".concat(selection.name.value)) : invariant(fragment, 9);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                argumentsObjectFromField(field, variables),\n                                execContext.context,\n                                { field: field, fragmentMap: execContext.fragmentMap },\n                            ]));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\nexport { LocalState };\n"]},"metadata":{},"sourceType":"module"}