{"ast":null,"code":"import { __extends } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonEmptyArray } from \"../utilities/index.js\";\nexport function isApolloError(err) {\n  return err.hasOwnProperty('graphQLErrors');\n}\n\nvar generateErrorMessage = function (err) {\n  var message = '';\n\n  if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {\n    var errors = (err.graphQLErrors || []).concat(err.clientErrors || []);\n    errors.forEach(function (error) {\n      var errorMessage = error ? error.message : 'Error message not found.';\n      message += \"\".concat(errorMessage, \"\\n\");\n    });\n  }\n\n  if (err.networkError) {\n    message += \"\".concat(err.networkError.message, \"\\n\");\n  }\n\n  message = message.replace(/\\n$/, '');\n  return message;\n};\n\nvar ApolloError = function (_super) {\n  __extends(ApolloError, _super);\n\n  function ApolloError(_a) {\n    var graphQLErrors = _a.graphQLErrors,\n        clientErrors = _a.clientErrors,\n        networkError = _a.networkError,\n        errorMessage = _a.errorMessage,\n        extraInfo = _a.extraInfo;\n\n    var _this = _super.call(this, errorMessage) || this;\n\n    _this.graphQLErrors = graphQLErrors || [];\n    _this.clientErrors = clientErrors || [];\n    _this.networkError = networkError || null;\n    _this.message = errorMessage || generateErrorMessage(_this);\n    _this.extraInfo = extraInfo;\n    _this.__proto__ = ApolloError.prototype;\n    return _this;\n  }\n\n  return ApolloError;\n}(Error);\n\nexport { ApolloError };","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql/spring.graphql.client/node_modules/@apollo/client/errors/index.js"],"names":["__extends","isNonEmptyArray","isApolloError","err","hasOwnProperty","generateErrorMessage","message","graphQLErrors","clientErrors","errors","concat","forEach","error","errorMessage","networkError","replace","ApolloError","_super","_a","extraInfo","_this","call","__proto__","prototype","Error"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,+BAAP;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAC/B,SAAOA,GAAG,CAACC,cAAJ,CAAmB,eAAnB,CAAP;AACH;;AACD,IAAIC,oBAAoB,GAAG,UAAUF,GAAV,EAAe;AACtC,MAAIG,OAAO,GAAG,EAAd;;AACA,MAAIL,eAAe,CAACE,GAAG,CAACI,aAAL,CAAf,IAAsCN,eAAe,CAACE,GAAG,CAACK,YAAL,CAAzD,EAA6E;AACzE,QAAIC,MAAM,GAAG,CAACN,GAAG,CAACI,aAAJ,IAAqB,EAAtB,EACRG,MADQ,CACDP,GAAG,CAACK,YAAJ,IAAoB,EADnB,CAAb;AAEAC,IAAAA,MAAM,CAACE,OAAP,CAAe,UAAUC,KAAV,EAAiB;AAC5B,UAAIC,YAAY,GAAGD,KAAK,GAClBA,KAAK,CAACN,OADY,GAElB,0BAFN;AAGAA,MAAAA,OAAO,IAAI,GAAGI,MAAH,CAAUG,YAAV,EAAwB,IAAxB,CAAX;AACH,KALD;AAMH;;AACD,MAAIV,GAAG,CAACW,YAAR,EAAsB;AAClBR,IAAAA,OAAO,IAAI,GAAGI,MAAH,CAAUP,GAAG,CAACW,YAAJ,CAAiBR,OAA3B,EAAoC,IAApC,CAAX;AACH;;AACDA,EAAAA,OAAO,GAAGA,OAAO,CAACS,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;AACA,SAAOT,OAAP;AACH,CAjBD;;AAkBA,IAAIU,WAAW,GAAI,UAAUC,MAAV,EAAkB;AACjCjB,EAAAA,SAAS,CAACgB,WAAD,EAAcC,MAAd,CAAT;;AACA,WAASD,WAAT,CAAqBE,EAArB,EAAyB;AACrB,QAAIX,aAAa,GAAGW,EAAE,CAACX,aAAvB;AAAA,QAAsCC,YAAY,GAAGU,EAAE,CAACV,YAAxD;AAAA,QAAsEM,YAAY,GAAGI,EAAE,CAACJ,YAAxF;AAAA,QAAsGD,YAAY,GAAGK,EAAE,CAACL,YAAxH;AAAA,QAAsIM,SAAS,GAAGD,EAAE,CAACC,SAArJ;;AACA,QAAIC,KAAK,GAAGH,MAAM,CAACI,IAAP,CAAY,IAAZ,EAAkBR,YAAlB,KAAmC,IAA/C;;AACAO,IAAAA,KAAK,CAACb,aAAN,GAAsBA,aAAa,IAAI,EAAvC;AACAa,IAAAA,KAAK,CAACZ,YAAN,GAAqBA,YAAY,IAAI,EAArC;AACAY,IAAAA,KAAK,CAACN,YAAN,GAAqBA,YAAY,IAAI,IAArC;AACAM,IAAAA,KAAK,CAACd,OAAN,GAAgBO,YAAY,IAAIR,oBAAoB,CAACe,KAAD,CAApD;AACAA,IAAAA,KAAK,CAACD,SAAN,GAAkBA,SAAlB;AACAC,IAAAA,KAAK,CAACE,SAAN,GAAkBN,WAAW,CAACO,SAA9B;AACA,WAAOH,KAAP;AACH;;AACD,SAAOJ,WAAP;AACH,CAdkB,CAcjBQ,KAdiB,CAAnB;;AAeA,SAASR,WAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonEmptyArray } from \"../utilities/index.js\";\nexport function isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (isNonEmptyArray(err.graphQLErrors) || isNonEmptyArray(err.clientErrors)) {\n        var errors = (err.graphQLErrors || [])\n            .concat(err.clientErrors || []);\n        errors.forEach(function (error) {\n            var errorMessage = error\n                ? error.message\n                : 'Error message not found.';\n            message += \"\".concat(errorMessage, \"\\n\");\n        });\n    }\n    if (err.networkError) {\n        message += \"\".concat(err.networkError.message, \"\\n\");\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\nexport { ApolloError };\n"]},"metadata":{},"sourceType":"module"}