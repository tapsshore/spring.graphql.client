{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { parseAndCheckHttpResponse } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var _a = linkOptions.uri,\n      uri = _a === void 0 ? '/graphql' : _a,\n      preferredFetch = linkOptions.fetch,\n      _b = linkOptions.print,\n      print = _b === void 0 ? defaultPrinter : _b,\n      includeExtensions = linkOptions.includeExtensions,\n      useGETForQueries = linkOptions.useGETForQueries,\n      _c = linkOptions.includeUnusedVariables,\n      includeUnusedVariables = _c === void 0 ? false : _c,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n\n  if (__DEV__) {\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n          name_1 = _a.name,\n          version = _a.version;\n\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n\n    var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _b.options,\n        body = _b.body;\n\n    if (body.variables && !includeUnusedVariables) {\n      var unusedNames_1 = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable: function (node, _key, parent) {\n          if (parent && parent.kind !== 'VariableDefinition') {\n            unusedNames_1.delete(node.name.value);\n          }\n        }\n      });\n\n      if (unusedNames_1.size) {\n        body.variables = __assign({}, body.variables);\n        unusedNames_1.forEach(function (name) {\n          delete body.variables[name];\n        });\n      }\n    }\n\n    var controller;\n\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n          _controller = _c.controller,\n          signal = _c.signal;\n\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n          newURI = _d.newURI,\n          parseError = _d.parseError;\n\n      if (parseError) {\n        return fromError(parseError);\n      }\n\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(function (observer) {\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      currentFetch(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n\n        if (err.result && err.result.errors && err.result.data) {\n          observer.next(err.result);\n        }\n\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Tapiwanashe Shoshore/Documents/Projects/spring.graphql/spring.graphql.client/node_modules/@apollo/client/link/http/createHttpLink.js"],"names":["__assign","__rest","visit","ApolloLink","Observable","serializeFetchParameter","selectURI","parseAndCheckHttpResponse","checkFetcher","selectHttpOptionsAndBodyInternal","defaultPrinter","fallbackHttpConfig","createSignalIfSupported","rewriteURIForGET","fromError","maybe","backupFetch","fetch","createHttpLink","linkOptions","_a","uri","preferredFetch","_b","print","includeExtensions","useGETForQueries","_c","includeUnusedVariables","requestOptions","__DEV__","linkConfig","http","options","fetchOptions","credentials","headers","operation","chosenURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","contextHeaders","contextConfig","body","variables","unusedNames_1","Set","Object","keys","query","Variable","node","_key","parent","kind","delete","value","size","forEach","controller","signal","_controller","definitionIsMutation","d","definitions","some","method","_d","newURI","parseError","observer","currentFetch","then","response","setContext","result","next","complete","catch","err","errors","data","error","abort"],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { parseAndCheckHttpResponse } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () { return fetch; });\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n    if (__DEV__) {\n        checkFetcher(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            var unusedNames_1 = new Set(Object.keys(body.variables));\n            visit(operation.query, {\n                Variable: function (node, _key, parent) {\n                    if (parent && parent.kind !== 'VariableDefinition') {\n                        unusedNames_1.delete(node.name.value);\n                    }\n                },\n            });\n            if (unusedNames_1.size) {\n                body.variables = __assign({}, body.variables);\n                unusedNames_1.forEach(function (name) {\n                    delete body.variables[name];\n                });\n            }\n        }\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            var currentFetch = preferredFetch || maybe(function () { return fetch; }) || backupFetch;\n            currentFetch(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}